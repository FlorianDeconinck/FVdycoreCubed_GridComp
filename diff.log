diff --git a/DynCore_GridCompMod.F90 b/DynCore_GridCompMod.F90
index cb5d7b6..d4a72cd 100644
--- a/DynCore_GridCompMod.F90
+++ b/DynCore_GridCompMod.F90
@@ -34,13 +34,11 @@
                            DynInit         => FV_InitState,          &
                            DynRun          => FV_Run,                &
                            DynFinalize     => FV_Finalize,           &
-                           getAgridWinds   => INTERP_DGRID_TO_AGRID, &
+                           getAllWinds     => fv_getAllWinds,        &
                            fillMassFluxes  => fv_fillMassFluxes,     &
                            computeMassFluxes => fv_computeMassFluxes,&
                            getVerticalMassFlux => fv_getVerticalMassFlux,&
                            getOmega        => fv_getOmega,           &
-                           getVorticity    => fv_getVorticity,       &
-                           getDivergence   => fv_getdivergence,      &
                            getEPV          => fv_getEPV,             &
                            getPKZ          => fv_getPKZ,             &
                            getDELZ         => fv_getDELZ,            &
@@ -2266,25 +2264,31 @@ contains
 ! Set the Profiling timers
 ! ------------------------
 
-    call MAPL_TimerAdd(GC,    name="INITIALIZE"  ,RC=STATUS)
+    call MAPL_TimerAdd(GC,    name="INITIALIZE"    ,RC=STATUS)
     VERIFY_(STATUS)
-    call MAPL_TimerAdd(GC,    name="RUN"         ,RC=STATUS)
+    call MAPL_TimerAdd(GC,    name="RUN"           ,RC=STATUS)
     VERIFY_(STATUS)
-    call MAPL_TimerAdd(GC,    name="RUN2"        ,RC=STATUS)
+    call MAPL_TimerAdd(GC,    name="RUN2"          ,RC=STATUS)
     VERIFY_(STATUS)
-    call MAPL_TimerAdd(GC,    name="-DYN_INIT"    ,RC=STATUS)       
+    call MAPL_TimerAdd(GC,    name="-DYN_INIT"     ,RC=STATUS)       
     VERIFY_(STATUS)          
-    call MAPL_TimerAdd(GC,    name="--FMS_INIT"  ,RC=STATUS)
+    call MAPL_TimerAdd(GC,    name="--FMS_INIT"    ,RC=STATUS)
     VERIFY_(STATUS)
-    call MAPL_TimerAdd(GC,    name="--FV_INIT"  ,RC=STATUS)
+    call MAPL_TimerAdd(GC,    name="--FV_INIT"     ,RC=STATUS)
     VERIFY_(STATUS)
-    call MAPL_TimerAdd(GC,    name="-DYN_CORE"   ,RC=STATUS)
+    call MAPL_TimerAdd(GC,    name="-DYN_ANA"      ,RC=STATUS)
     VERIFY_(STATUS)
-    call MAPL_TimerAdd(GC,    name="--FV_DYNAMICS",RC=STATUS)
+    call MAPL_TimerAdd(GC,    name="-DYN_PROLOGUE" ,RC=STATUS)
     VERIFY_(STATUS)
-    call MAPL_TimerAdd(GC,    name="--MASS_FIX"  ,RC=STATUS)
+    call MAPL_TimerAdd(GC,    name="-DYN_CORE"     ,RC=STATUS)
     VERIFY_(STATUS)
-    call MAPL_TimerAdd(GC,    name="FINALIZE"    ,RC=STATUS)
+    call MAPL_TimerAdd(GC,    name="-DYN_EPILOGUE" ,RC=STATUS)
+    VERIFY_(STATUS)
+    call MAPL_TimerAdd(GC,    name="--FV_DYNAMICS" ,RC=STATUS)
+    VERIFY_(STATUS)
+    call MAPL_TimerAdd(GC,    name="--MASS_FIX"    ,RC=STATUS)
+    VERIFY_(STATUS)
+    call MAPL_TimerAdd(GC,    name="FINALIZE"      ,RC=STATUS)
     VERIFY_(STATUS)
 
 ! Register services for this component
@@ -2375,8 +2379,8 @@ contains
   real(r8), pointer                  ::  pt(:,:,:)
   real(r8), pointer                  ::  pk(:,:,:)
 
-  real(r8), allocatable              ::  ua(:,:,:)
-  real(r8), allocatable              ::  va(:,:,:)
+  real(r8), allocatable              ::  ur(:,:,:)
+  real(r8), allocatable              ::  vr(:,:,:)
 
   real(r4), pointer                  :: ple(:,:,:)
   real(r4), pointer                  ::   u(:,:,:)
@@ -2516,18 +2520,18 @@ contains
     jlast  = state%grid%je
     km     = state%grid%npz
 
-    allocate( UA(ifirst:ilast,jfirst:jlast,km) )
-    allocate( VA(ifirst:ilast,jfirst:jlast,km) )
+    allocate( UR(ifirst:ilast,jfirst:jlast,km) )
+    allocate( VR(ifirst:ilast,jfirst:jlast,km) )
 
-    call getAgridWinds( UD, VD, UA, VA, rotate=.true.)
+    call getAllWinds( UD, VD, UR=UR, VR=VR, rotate=.true.)
 
-      U = UA
-      V = VA
+      U = UR
+      V = VR
       T = PT*PK
     PLE = PE
 
-    deallocate( UA )
-    deallocate( VA )
+    deallocate( UR )
+    deallocate( VR )
 
 ! Fill Grid-Cell Area Delta-X/Y
 ! -----------------------------
@@ -2695,7 +2699,7 @@ subroutine Run(gc, import, export, clock, rc)
     integer  :: K, L, n
     integer  :: im_replay,jm_replay
     logical, parameter :: convt = .false. ! Until this is run with full physics
-    logical  :: is_ringing
+    logical  :: is_shutoff, is_ringing
 
     real(r8),     pointer :: phisxy(:,:)
     real(kind=4), pointer ::   phis(:,:)
@@ -2712,6 +2716,8 @@ subroutine Run(gc, import, export, clock, rc)
     real(r8), allocatable ::     vc(:,:,:) ! temporary array
     real(r8), allocatable ::    uc0(:,:,:) ! temporary array
     real(r8), allocatable ::    vc0(:,:,:) ! temporary array
+    real(r8), allocatable ::     ur(:,:,:) ! temporary array
+    real(r8), allocatable ::     vr(:,:,:) ! temporary array
     real(r8), allocatable ::     qv(:,:,:) ! temporary array
     real(r8), allocatable ::     ql(:,:,:) ! temporary array
     real(r8), allocatable ::     qi(:,:,:) ! temporary array
@@ -2726,11 +2732,11 @@ subroutine Run(gc, import, export, clock, rc)
     real(r8), allocatable ::  qrold(:,:,:) ! temporary array
     real(r8), allocatable ::  qsold(:,:,:) ! temporary array
     real(r8), allocatable ::  qgold(:,:,:) ! temporary array
+    real(r8), allocatable ::delpold(:,:,:) ! temporary array
     real(r8), allocatable ::     ox(:,:,:) ! temporary array
     real(r8), allocatable ::     zl(:,:,:) ! temporary array
     real(r8), allocatable ::    zle(:,:,:) ! temporary array
     real(r8), allocatable ::   delp(:,:,:) ! temporary array
-    real(r8), allocatable ::delpold(:,:,:) ! temporary array
     real(r8), allocatable ::   dudt(:,:,:) ! temporary array
     real(r8), allocatable ::   dvdt(:,:,:) ! temporary array
     real(r8), allocatable ::   dtdt(:,:,:) ! temporary array
@@ -2739,18 +2745,13 @@ subroutine Run(gc, import, export, clock, rc)
     real(r8), allocatable ::  ddpdt(:,:,:) ! temporary array
     real(r8), allocatable ::  dpedt(:,:,:) ! temporary array
     real(FVPRC), allocatable :: tmp3d (:,:,:) ! temporary array
+    real(FVPRC), allocatable ::  vort (:,:,:) ! temporary array
+    real(FVPRC), allocatable ::  divg (:,:,:) ! temporary array
     real(r8), allocatable ::     dmdt(:,:) ! temporary array
-    real(r8), allocatable ::   tmp2d (:,:) ! temporary array
-    real(r8), allocatable ::    gze(:,:,:) ! temporary array
 
-    real(r8), allocatable, target :: ke    (:,:,:) ! Kinetic    Energy
-    real(r8), allocatable, target :: cpt   (:,:,:) ! Internal   Energy
-    real(r8), allocatable, target :: phi   (:,:,:) ! Potential  Energy
     real(r8), allocatable :: qsum1 (:,:)   ! Vertically Integrated Variable
     real(r4), allocatable :: qsum2 (:,:)   ! Vertically Integrated Variable
 
-    real(r8), allocatable :: phi00 (:,:)   ! Vertically Integrated phi
-
     real(r8), allocatable :: penrg (:,:)   ! Vertically Integrated Cp*T
     real(r8), allocatable :: kenrg (:,:)   ! Vertically Integrated K
     real(r8), allocatable :: tenrg (:,:)   ! PHIS*(Psurf-Ptop)
@@ -2761,32 +2762,6 @@ subroutine Run(gc, import, export, clock, rc)
     real(r8), allocatable :: pedyn (:,:)
     real(r8), allocatable :: tedyn (:,:)
 
-#ifdef ENERGETICS
-    real(r8), allocatable :: penrga (:,:)  ! Vertically Integrated Cp*T
-    real(r8), allocatable :: kenrga (:,:)  ! Vertically Integrated K
-    real(r8), allocatable :: tenrga (:,:)  ! PHIS*(Psurf-Ptop)
-    real(r8), allocatable :: penrgb (:,:)  ! Vertically Integrated Cp*T
-    real(r8), allocatable :: kenrgb (:,:)  ! Vertically Integrated K
-    real(r8), allocatable :: tenrgb (:,:)  ! PHIS*(Psurf-Ptop)
-    real(r8), allocatable :: kehot  (:,:)  ! Vertically Integrated K due to higher-order-terms
-    real(r8), allocatable :: kedp   (:,:)  ! Vertically Integrated K due to pressure change
-    real(r8), allocatable :: keadv  (:,:)  ! Vertically Integrated K due to advection
-    real(r8), allocatable :: kepg   (:,:)  ! Vertically Integrated K due to pressure gradient
-    real(r8), allocatable :: kegen  (:,:)
-    real(r8), allocatable :: kecdcor(:,:)
-    real(r8), allocatable :: pecdcor(:,:)
-    real(r8), allocatable :: tecdcor(:,:)
-    real(r8), allocatable :: keremap(:,:)
-    real(r8), allocatable :: peremap(:,:)
-    real(r8), allocatable :: teremap(:,:)
-    real(r8), allocatable :: convke (:,:)
-    real(r8), allocatable :: convcpt(:,:)
-    real(r8), allocatable :: convphi(:,:)
-    real(r8), allocatable :: convthv(:,:)
-#endif
-
-    real(r8),     allocatable :: dthdtremap  (:,:)   ! Vertically Integrated THV tendency due to vertical remapping
-    real(r8),     allocatable :: dthdtconsv  (:,:)   ! Vertically Integrated THV tendency due to TE conservation
     real(kind=4), allocatable :: dqvdtanaint1(:,:)
     real(kind=4), allocatable :: dqvdtanaint2(:,:)
     real(kind=4), allocatable :: dqldtanaint1(:,:)
@@ -2798,7 +2773,6 @@ subroutine Run(gc, import, export, clock, rc)
     real(kind=4), allocatable :: dthdtanaint1(:,:)
     real(kind=4), allocatable :: dthdtanaint2(:,:)
 
-    real(kind=4), allocatable :: dummy (:,:,:) ! Dummy 3-D  Variable
     real(kind=4), allocatable :: tropp1(:,:)   ! Tropopause Pressure
     real(kind=4), allocatable :: tropp2(:,:)   ! Tropopause Pressure
     real(kind=4), allocatable :: tropp3(:,:)   ! Tropopause Pressure
@@ -2806,8 +2780,6 @@ subroutine Run(gc, import, export, clock, rc)
     real(kind=4), allocatable :: tropq (:,:)   ! Tropopause Specific Humidity
 
     real(r8), allocatable :: omaxyz(:,:,:) ! vertical pressure velocity (pa/sec)
-    real(r8), allocatable :: cptxyz(:,:,:) ! Cp*Tv
-    real(r8), allocatable :: thvxyz(:,:,:) ! Thetav
     real(r8), allocatable :: epvxyz(:,:,:) ! ertel's potential vorticity
 
     real(r8), allocatable :: cxxyz(:,:,:)  ! Accumulated eastward courant numbers
@@ -2897,7 +2869,10 @@ subroutine Run(gc, import, export, clock, rc)
     character(len=ESMF_MAXSTR), allocatable :: biggerlist(:)
     integer, parameter                  :: XLIST_MAX = 60
     logical                             :: isPresent
-    
+   
+    logical                             :: doEnergetics
+    logical                             :: doTropvars
+ 
   Iam = "Run"
   call ESMF_GridCompGet( GC, name=COMP_NAME, CONFIG=CF, grid=ESMFGRID, RC=STATUS )
   VERIFY_(STATUS)
@@ -2948,12 +2923,9 @@ subroutine Run(gc, import, export, clock, rc)
   is_ringing = ESMF_AlarmIsRinging( STATE%ALARMS(TIME_TO_RUN),rc=status); VERIFY_(status) 
   if (.not. is_ringing) return
 
-
 ! Allocate Arrays
 ! ---------------
-      ALLOCATE(  dummy(ifirstxy:ilastxy,jfirstxy:jlastxy,km) )
       ALLOCATE(   delp(ifirstxy:ilastxy,jfirstxy:jlastxy,km) )
-      ALLOCATE(delpold(ifirstxy:ilastxy,jfirstxy:jlastxy,km) )
       ALLOCATE(   dudt(ifirstxy:ilastxy,jfirstxy:jlastxy,km) )
       ALLOCATE(   dvdt(ifirstxy:ilastxy,jfirstxy:jlastxy,km) )
       ALLOCATE(   dtdt(ifirstxy:ilastxy,jfirstxy:jlastxy,km) )
@@ -2971,32 +2943,35 @@ subroutine Run(gc, import, export, clock, rc)
       ALLOCATE(     vc(ifirstxy:ilastxy,jfirstxy:jlastxy,km) )
       ALLOCATE(    uc0(ifirstxy:ilastxy,jfirstxy:jlastxy,km) )
       ALLOCATE(    vc0(ifirstxy:ilastxy,jfirstxy:jlastxy,km) )
+      ALLOCATE(     ur(ifirstxy:ilastxy,jfirstxy:jlastxy,km) )
+      ALLOCATE(     vr(ifirstxy:ilastxy,jfirstxy:jlastxy,km) )
       ALLOCATE(     qv(ifirstxy:ilastxy,jfirstxy:jlastxy,km) )
       ALLOCATE(     ql(ifirstxy:ilastxy,jfirstxy:jlastxy,km) )
       ALLOCATE(     qi(ifirstxy:ilastxy,jfirstxy:jlastxy,km) )
       ALLOCATE(     qr(ifirstxy:ilastxy,jfirstxy:jlastxy,km) )
       ALLOCATE(     qs(ifirstxy:ilastxy,jfirstxy:jlastxy,km) )
       ALLOCATE(     qg(ifirstxy:ilastxy,jfirstxy:jlastxy,km) )
-      ALLOCATE(  qdnew(ifirstxy:ilastxy,jfirstxy:jlastxy,km) )
-      ALLOCATE(  qdold(ifirstxy:ilastxy,jfirstxy:jlastxy,km) )
-      ALLOCATE(  qvold(ifirstxy:ilastxy,jfirstxy:jlastxy,km) )
-      ALLOCATE(  qlold(ifirstxy:ilastxy,jfirstxy:jlastxy,km) )
-      ALLOCATE(  qiold(ifirstxy:ilastxy,jfirstxy:jlastxy,km) )
-      ALLOCATE(  qrold(ifirstxy:ilastxy,jfirstxy:jlastxy,km) )
-      ALLOCATE(  qsold(ifirstxy:ilastxy,jfirstxy:jlastxy,km) )
-      ALLOCATE(  qgold(ifirstxy:ilastxy,jfirstxy:jlastxy,km) )
       ALLOCATE(     ox(ifirstxy:ilastxy,jfirstxy:jlastxy,km) )
 
-      ALLOCATE(     ke(ifirstxy:ilastxy,jfirstxy:jlastxy,km) )
-      ALLOCATE(    cpt(ifirstxy:ilastxy,jfirstxy:jlastxy,km) )
-      ALLOCATE(    phi(ifirstxy:ilastxy,jfirstxy:jlastxy,km) )
-      ALLOCATE(    gze(ifirstxy:ilastxy,jfirstxy:jlastxy,km+1) )
-
       ALLOCATE(  qsum1(ifirstxy:ilastxy,jfirstxy:jlastxy)    )
       ALLOCATE(  qsum2(ifirstxy:ilastxy,jfirstxy:jlastxy)    )
 
       ALLOCATE(   dmdt(ifirstxy:ilastxy,jfirstxy:jlastxy)    )
-      ALLOCATE(  phi00(ifirstxy:ilastxy,jfirstxy:jlastxy)    )
+
+      doEnergetics=.false.
+      call MAPL_GetPointer(export,temp2D,'KEANA',rc=status); VERIFY_(STATUS)
+      if(associated(temp2D)) doEnergetics=.true.
+      call MAPL_GetPointer(export,temp2D,'PEANA',rc=status); VERIFY_(STATUS)
+      if(associated(temp2D)) doEnergetics=.true.
+      call MAPL_GetPointer(export,temp2D,'TEANA',rc=status); VERIFY_(STATUS)
+      if(associated(temp2D)) doEnergetics=.true.
+      call MAPL_GetPointer(export,temp2D,'KEDYN',rc=status); VERIFY_(STATUS)
+      if(associated(temp2D)) doEnergetics=.true.
+      call MAPL_GetPointer(export,temp2D,'PEDYN',rc=status); VERIFY_(STATUS)
+      if(associated(temp2D)) doEnergetics=.true.
+      call MAPL_GetPointer(export,temp2D,'TEDYN',rc=status); VERIFY_(STATUS)
+      if(associated(temp2D)) doEnergetics=.true.
+      if (doEnergetics) then
       ALLOCATE(  kedyn(ifirstxy:ilastxy,jfirstxy:jlastxy)    )
       ALLOCATE(  pedyn(ifirstxy:ilastxy,jfirstxy:jlastxy)    )
       ALLOCATE(  tedyn(ifirstxy:ilastxy,jfirstxy:jlastxy)    )
@@ -3006,60 +2981,19 @@ subroutine Run(gc, import, export, clock, rc)
       ALLOCATE( kenrg0(ifirstxy:ilastxy,jfirstxy:jlastxy)    )
       ALLOCATE( penrg0(ifirstxy:ilastxy,jfirstxy:jlastxy)    )
       ALLOCATE( tenrg0(ifirstxy:ilastxy,jfirstxy:jlastxy)    )
+      endif
 
-#ifdef ENERGETICS
-      ALLOCATE( kenrga (ifirstxy:ilastxy,jfirstxy:jlastxy)   )
-      ALLOCATE( penrga (ifirstxy:ilastxy,jfirstxy:jlastxy)   )
-      ALLOCATE( tenrga (ifirstxy:ilastxy,jfirstxy:jlastxy)   )
-      ALLOCATE( kenrgb (ifirstxy:ilastxy,jfirstxy:jlastxy)   )
-      ALLOCATE( penrgb (ifirstxy:ilastxy,jfirstxy:jlastxy)   )
-      ALLOCATE( tenrgb (ifirstxy:ilastxy,jfirstxy:jlastxy)   )
-      ALLOCATE( kepg   (ifirstxy:ilastxy,jfirstxy:jlastxy)   )
-      ALLOCATE( keadv  (ifirstxy:ilastxy,jfirstxy:jlastxy)   )
-      ALLOCATE( kedp   (ifirstxy:ilastxy,jfirstxy:jlastxy)   )
-      ALLOCATE( kehot  (ifirstxy:ilastxy,jfirstxy:jlastxy)   )
-      ALLOCATE( kegen  (ifirstxy:ilastxy,jfirstxy:jlastxy)   )
-      ALLOCATE( kecdcor(ifirstxy:ilastxy,jfirstxy:jlastxy)   )
-      ALLOCATE( pecdcor(ifirstxy:ilastxy,jfirstxy:jlastxy)   )
-      ALLOCATE( tecdcor(ifirstxy:ilastxy,jfirstxy:jlastxy)   )
-      ALLOCATE( keremap(ifirstxy:ilastxy,jfirstxy:jlastxy)   )
-      ALLOCATE( peremap(ifirstxy:ilastxy,jfirstxy:jlastxy)   )
-      ALLOCATE( teremap(ifirstxy:ilastxy,jfirstxy:jlastxy)   )
-      ALLOCATE( convke (ifirstxy:ilastxy,jfirstxy:jlastxy)   )
-      ALLOCATE( convcpt(ifirstxy:ilastxy,jfirstxy:jlastxy)   )
-      ALLOCATE( convphi(ifirstxy:ilastxy,jfirstxy:jlastxy)   )
-      ALLOCATE( convthv(ifirstxy:ilastxy,jfirstxy:jlastxy)   )
-#endif
-
-      ALLOCATE( tropp1      (ifirstxy:ilastxy,jfirstxy:jlastxy) )
-      ALLOCATE( tropp2      (ifirstxy:ilastxy,jfirstxy:jlastxy) )
-      ALLOCATE( tropp3      (ifirstxy:ilastxy,jfirstxy:jlastxy) )
-      ALLOCATE( tropt       (ifirstxy:ilastxy,jfirstxy:jlastxy) )
-      ALLOCATE( tropq       (ifirstxy:ilastxy,jfirstxy:jlastxy) )
+      ALLOCATE(   vort(ifirstxy:ilastxy,jfirstxy:jlastxy,km) )
+      ALLOCATE(   divg(ifirstxy:ilastxy,jfirstxy:jlastxy,km) )
 
       ALLOCATE(  tmp3d(ifirstxy:ilastxy,jfirstxy:jlastxy,km) )
-      ALLOCATE( dqvdtanaint1(ifirstxy:ilastxy,jfirstxy:jlastxy) )
-      ALLOCATE( dqvdtanaint2(ifirstxy:ilastxy,jfirstxy:jlastxy) )
-      ALLOCATE( dqldtanaint1(ifirstxy:ilastxy,jfirstxy:jlastxy) )
-      ALLOCATE( dqldtanaint2(ifirstxy:ilastxy,jfirstxy:jlastxy) )
-      ALLOCATE( dqidtanaint1(ifirstxy:ilastxy,jfirstxy:jlastxy) )
-      ALLOCATE( dqidtanaint2(ifirstxy:ilastxy,jfirstxy:jlastxy) )
-      ALLOCATE( doxdtanaint1(ifirstxy:ilastxy,jfirstxy:jlastxy) )
-      ALLOCATE( doxdtanaint2(ifirstxy:ilastxy,jfirstxy:jlastxy) )
-      ALLOCATE( dthdtanaint1(ifirstxy:ilastxy,jfirstxy:jlastxy) )
-      ALLOCATE( dthdtanaint2(ifirstxy:ilastxy,jfirstxy:jlastxy) )
-      ALLOCATE( dthdtremap  (ifirstxy:ilastxy,jfirstxy:jlastxy) )
-      ALLOCATE( dthdtconsv  (ifirstxy:ilastxy,jfirstxy:jlastxy) )
-
-      ALLOCATE(  tmp2d   (ifirstxy:ilastxy,jfirstxy:jlastxy     ) )
+
       ALLOCATE( phisxy   (ifirstxy:ilastxy,jfirstxy:jlastxy     ) )
       ALLOCATE(    plk   (ifirstxy:ilastxy,jfirstxy:jlastxy,km  ) )
       ALLOCATE(   pkxy   (ifirstxy:ilastxy,jfirstxy:jlastxy,km+1) )
       ALLOCATE(     zl   (ifirstxy:ilastxy,jfirstxy:jlastxy,km  ) )
       ALLOCATE(    zle   (ifirstxy:ilastxy,jfirstxy:jlastxy,km+1) )
       ALLOCATE( omaxyz   (ifirstxy:ilastxy,jfirstxy:jlastxy,km  ) )
-      ALLOCATE( cptxyz   (ifirstxy:ilastxy,jfirstxy:jlastxy,km  ) )
-      ALLOCATE( thvxyz   (ifirstxy:ilastxy,jfirstxy:jlastxy,km  ) )
       ALLOCATE( epvxyz   (ifirstxy:ilastxy,jfirstxy:jlastxy,km  ) )
       ALLOCATE(  cxxyz   (ifirstxy:ilastxy,jfirstxy:jlastxy,km  ) )
       ALLOCATE(  cyxyz   (ifirstxy:ilastxy,jfirstxy:jlastxy,km  ) )
@@ -3236,6 +3170,14 @@ subroutine Run(gc, import, export, clock, rc)
          end if
       end do
 
+! WMP Begin REPLAY/ANA section
+      call MAPL_TimerOn(MAPL,"-DYN_ANA")
+      call ESMF_ClockGetAlarm(Clock,'ReplayShutOff',Alarm,rc=Status)
+      VERIFY_(status)
+      is_shutoff = ESMF_AlarmIsRinging( Alarm,rc=Status)
+      VERIFY_(status)
+
+      if (.not. is_shutoff) then
 ! If requested, do Intermittent Replay
 !-------------------------------------
 
@@ -3421,6 +3363,16 @@ subroutine Run(gc, import, export, clock, rc)
 ! Diagnostics Before Analysis Increments are Added
 !-------------------------------------------------
 
+      ALLOCATE(delpold(ifirstxy:ilastxy,jfirstxy:jlastxy,km) )
+      ALLOCATE(  qdnew(ifirstxy:ilastxy,jfirstxy:jlastxy,km) )
+      ALLOCATE(  qdold(ifirstxy:ilastxy,jfirstxy:jlastxy,km) )
+      ALLOCATE(  qvold(ifirstxy:ilastxy,jfirstxy:jlastxy,km) )
+      ALLOCATE(  qlold(ifirstxy:ilastxy,jfirstxy:jlastxy,km) )
+      ALLOCATE(  qiold(ifirstxy:ilastxy,jfirstxy:jlastxy,km) )
+      ALLOCATE(  qrold(ifirstxy:ilastxy,jfirstxy:jlastxy,km) )
+      ALLOCATE(  qsold(ifirstxy:ilastxy,jfirstxy:jlastxy,km) )
+      ALLOCATE(  qgold(ifirstxy:ilastxy,jfirstxy:jlastxy,km) )
+
       call MAPL_GetPointer ( IMPORT, dqvana, 'DQVANA', RC=STATUS )   ! Get QV Increment from Analysis
       VERIFY_(STATUS)
       call MAPL_GetPointer ( IMPORT, dqlana, 'DQLANA', RC=STATUS )   ! Get QL Increment from Analysis
@@ -3489,25 +3441,26 @@ subroutine Run(gc, import, export, clock, rc)
 
 !! Get A-grid winds
 !! ----------------
-      call getAgridWinds(vars%u, vars%v, ua, va, rotate=.true.)
+      call getAllWinds(vars%u, vars%v, UR=ur, VR=vr, rotate=.true.)
 
       delp   = vars%pe(:,:,2:)  -vars%pe(:,:,:km)   ! Pressure Thickness
       dmdt   = vars%pe(:,:,km+1)-vars%pe(:,:,1)     ! Psurf-Ptop
       tempxy = vars%pt * (1.0+eps*(qv-dqvana))       ! Compute THV Before Analysis Update
 
-      call Energetics (ua,va,tempxy,vars%pe,delp,vars%pkz,phisxy,kenrg,penrg,tenrg)
+      if (doEnergetics) &
+      call Energetics (ur,vr,tempxy,vars%pe,delp,vars%pkz,phisxy,kenrg,penrg,tenrg)
 
 ! DUDTANA
 ! -------
       call MAPL_GetPointer ( export, dudtana, 'DUDTANA', rc=status )
       VERIFY_(STATUS)
-      if( associated(dudtana) ) dudtana = ua
+      if( associated(dudtana) ) dudtana = ur
 
 ! DVDTANA
 ! -------
       call MAPL_GetPointer ( export, dvdtana, 'DVDTANA', rc=status )
       VERIFY_(STATUS)
-      if( associated(dvdtana) ) dvdtana = va
+      if( associated(dvdtana) ) dvdtana = vr
 
 ! DTDTANA
 ! -------
@@ -3527,6 +3480,8 @@ subroutine Run(gc, import, export, clock, rc)
       VERIFY_(STATUS)
       if( associated(temp2D) ) then
           tempxy       = vars%pt*(1+eps*(qv-dqvana))   ! Set tempxy = TH*QVold (Before Analysis Update)
+          ALLOCATE( dthdtanaint1(ifirstxy:ilastxy,jfirstxy:jlastxy) )
+          ALLOCATE( dthdtanaint2(ifirstxy:ilastxy,jfirstxy:jlastxy) )
           dthdtanaint1 = 0.0
           do k=1,km
           dthdtanaint1 = dthdtanaint1 + tempxy(:,:,k)*delp(:,:,k)
@@ -3538,6 +3493,8 @@ subroutine Run(gc, import, export, clock, rc)
       call MAPL_GetPointer ( export, temp2D, 'DQVDTANAINT', rc=status )
       VERIFY_(STATUS)
       if( associated(temp2D) ) then
+          ALLOCATE( dqvdtanaint1(ifirstxy:ilastxy,jfirstxy:jlastxy) )
+          ALLOCATE( dqvdtanaint2(ifirstxy:ilastxy,jfirstxy:jlastxy) )
           tempxy       = qv-dqvana   ! Set tempxy = QVold (Before Analysis Update)
           dqvdtanaint1 = 0.0
           do k=1,km
@@ -3550,6 +3507,8 @@ subroutine Run(gc, import, export, clock, rc)
       call MAPL_GetPointer ( export, temp2D, 'DQLDTANAINT', rc=status )
       VERIFY_(STATUS)
       if( associated(temp2D) ) then
+          ALLOCATE( dqldtanaint1(ifirstxy:ilastxy,jfirstxy:jlastxy) )
+          ALLOCATE( dqldtanaint2(ifirstxy:ilastxy,jfirstxy:jlastxy) )
           dqldtanaint1 = 0.0
           do N = 1,size(names)
              if( trim(names(N)).eq.'QLCN' .or. &
@@ -3573,6 +3532,8 @@ subroutine Run(gc, import, export, clock, rc)
       call MAPL_GetPointer ( export, temp2D, 'DQIDTANAINT', rc=status )
       VERIFY_(STATUS)
       if( associated(temp2D) ) then
+          ALLOCATE( dqidtanaint1(ifirstxy:ilastxy,jfirstxy:jlastxy) )
+          ALLOCATE( dqidtanaint2(ifirstxy:ilastxy,jfirstxy:jlastxy) )
           dqidtanaint1 = 0.0
           do N = 1,size(names)
              if( trim(names(N)).eq.'QICN' .or. &
@@ -3596,6 +3557,8 @@ subroutine Run(gc, import, export, clock, rc)
       call MAPL_GetPointer ( export, temp2D, 'DOXDTANAINT', rc=status )
       VERIFY_(STATUS)
       if( associated(temp2D) ) then
+          ALLOCATE( doxdtanaint1(ifirstxy:ilastxy,jfirstxy:jlastxy) )
+          ALLOCATE( doxdtanaint2(ifirstxy:ilastxy,jfirstxy:jlastxy) )
           tempxy       = OX-doxana   ! Set tempxy = OXold (Before Analysis Update)
           doxdtanaint1 = 0.0
           do k=1,km
@@ -3788,7 +3751,7 @@ subroutine Run(gc, import, export, clock, rc)
       VERIFY_(STATUS)
       if( associated(temp2D) ) temp2D = ( (vars%pe(:,:,km+1)-vars%pe(:,:,1)) - dmdt )/(grav*dt)
 
-      call getAgridWinds(vars%u, vars%v, ua, va, rotate=.true.)
+      call getAllWinds(vars%u, vars%v, UC=uc0, VC=vc0, UR=ur, VR=vr, rotate=.true.)
 
       dmdt = vars%pe(:,:,km+1)-vars%pe(:,:,1)     ! Psurf-Ptop
 
@@ -3797,8 +3760,7 @@ subroutine Run(gc, import, export, clock, rc)
       call MAPL_GetPointer ( export, dudtana, 'DUDTANA', rc=status )
       VERIFY_(STATUS)
       if( associated(dudtana) ) then
-                     dummy   =  ua
-                     dudtana = (dummy-dudtana)/dt
+                     dudtana = (ur-dudtana)/dt
       endif
 
 ! DVDTANA
@@ -3806,8 +3768,7 @@ subroutine Run(gc, import, export, clock, rc)
       call MAPL_GetPointer ( export, dvdtana, 'DVDTANA', rc=status )
       VERIFY_(STATUS)
       if( associated(dvdtana) ) then
-                     dummy   =  va
-                     dvdtana = (dummy-dvdtana)/dt
+                     dvdtana = (vr-dvdtana)/dt
       endif
 
 ! DTDTANA
@@ -3815,8 +3776,7 @@ subroutine Run(gc, import, export, clock, rc)
       call MAPL_GetPointer ( export, dtdtana, 'DTDTANA', rc=status )
       VERIFY_(STATUS)
       if( associated(dtdtana) ) then
-                     dummy   =  vars%pt*vars%pkz
-                     dtdtana = (dummy-dtdtana)/dt
+                     dtdtana = ((vars%pt*vars%pkz)-dtdtana)/dt
       endif
 
 ! DDELPDTANA
@@ -3824,8 +3784,7 @@ subroutine Run(gc, import, export, clock, rc)
       call MAPL_GetPointer ( export, ddpdtana, 'DDELPDTANA', rc=status )
       VERIFY_(STATUS)
       if( associated(ddpdtana) ) then
-                     dummy    =  delp
-                     ddpdtana = (dummy-ddpdtana)/dt
+                     ddpdtana = (delp-ddpdtana)/dt
       endif
 
 ! DTHVDTANAINT
@@ -3839,6 +3798,8 @@ subroutine Run(gc, import, export, clock, rc)
           dthdtanaint2 = dthdtanaint2 + tempxy(:,:,k)*delp(:,:,k)
           enddo
           temp2D       = (dthdtanaint2-dthdtanaint1) * MAPL_P00**MAPL_KAPPA / (MAPL_GRAV*DT)
+          DEALLOCATE( dthdtanaint1 )
+          DEALLOCATE( dthdtanaint2 )
       endif
 
 ! DQVDTANAINT
@@ -3852,6 +3813,8 @@ subroutine Run(gc, import, export, clock, rc)
           dqvdtanaint2 = dqvdtanaint2 + tempxy(:,:,k)*delp(:,:,k)
           enddo
           temp2D       = (dqvdtanaint2-dqvdtanaint1) / (MAPL_GRAV*DT)
+          DEALLOCATE( dqvdtanaint1 )
+          DEALLOCATE( dqvdtanaint2 )
       endif
 
 ! DQLDTANAINT
@@ -3873,6 +3836,8 @@ subroutine Run(gc, import, export, clock, rc)
              endif
           enddo
           temp2D = (dqldtanaint2-dqldtanaint1) / (MAPL_GRAV*DT)
+          DEALLOCATE( dqldtanaint1 )
+          DEALLOCATE( dqldtanaint2 )
       endif
 
 ! DQIDTANAINT
@@ -3894,6 +3859,8 @@ subroutine Run(gc, import, export, clock, rc)
              endif
           enddo
           temp2D = (dqidtanaint2-dqidtanaint1) / (MAPL_GRAV*DT)
+          DEALLOCATE( dqidtanaint1 )
+          DEALLOCATE( dqidtanaint2 )
       endif
 
 ! DOXDTANAINT
@@ -3907,8 +3874,68 @@ subroutine Run(gc, import, export, clock, rc)
           doxdtanaint2 = doxdtanaint2 + tempxy(:,:,k)*delp(:,:,k)
           enddo
           temp2D = (doxdtanaint2-doxdtanaint1) * (MAPL_O3MW/MAPL_AIRMW) / (MAPL_GRAV*DT)
+          DEALLOCATE( doxdtanaint1 )
+          DEALLOCATE( doxdtanaint2 )
       endif
 
+      DEALLOCATE( delpold)
+      DEALLOCATE( qdnew  )
+      DEALLOCATE( qdold  )
+      DEALLOCATE( qvold  )
+      DEALLOCATE( qlold  )
+      DEALLOCATE( qiold  )
+      DEALLOCATE( qrold  )
+      DEALLOCATE( qsold  )
+      DEALLOCATE( qgold  )
+
+! WMP End ANA section
+      else ! REPLAY/ANA is_shutoff
+
+      ox = 0.0
+      qv = 0.0
+      if (.not. ADIABATIC) then
+       do k=1,size(names)
+         pos = index(names(k),'::')
+         if(pos > 0) then
+           if( (names(k)(pos+2:))=='OX' ) then
+             if ( (ooo%is_r4) .and. associated(ooo%content_r4) ) then
+                if (size(ox)==size(ooo%content_r4)) then
+                   ox = ooo%content_r4
+                endif
+             elseif (associated(ooo%content)) then
+                if (size(ox)==size(ooo%content)) then
+                   ox = ooo%content
+                endif
+             endif
+           endif
+         endif
+         if( trim(names(k))=='Q'  ) then
+             if ( (qqq%is_r4) .and. associated(qqq%content_r4) ) then
+                if (size(qv)==size(qqq%content_r4)) then
+                   qv = qqq%content_r4
+                   _ASSERT(all(qv >= 0.0),'negative water vapor detected')
+                endif
+             elseif (associated(qqq%content)) then
+                if (size(qv)==size(qqq%content)) then
+                   qv = qqq%content
+                   _ASSERT(all(qv >= 0.0),'negative water vapor detected')
+                endif
+             endif
+         endif
+       enddo
+      endif
+      call getAllWinds(vars%u, vars%v, UC=uc0, VC=vc0, UR=ur, VR=vr, rotate=.true.)
+      delp   = vars%pe(:,:,2:)  -vars%pe(:,:,:km)   ! Pressure Thickness
+      dmdt   = vars%pe(:,:,km+1)-vars%pe(:,:,1)     ! Psurf-Ptop
+      tempxy = vars%pt * (1.0+eps*qv)
+      if (doEnergetics) &
+      call Energetics (ur,vr,tempxy,vars%pe,delp,vars%pkz,phisxy,kenrg,penrg,tenrg)
+
+      endif
+      call MAPL_TimerOff(MAPL,"-DYN_ANA")
+
+
+      call MAPL_TimerOn(MAPL,"-DYN_PROLOGUE")
 ! Create FV Thermodynamic Variables
 !----------------------------------
 
@@ -3919,16 +3946,16 @@ subroutine Run(gc, import, export, clock, rc)
 
       dpedt  = vars%pe      ! Edge Pressure      Tendency
       ddpdt  =    delp      ! Pressure Thickness Tendency
-      dudt   =     ua       ! U-Wind on A-Grid   Tendency
-      dvdt   =     va       ! V-Wind on A-Grid   Tendency
+      dudt   =     ur       ! U-Wind on A-Grid   Tendency
+      dvdt   =     vr       ! V-Wind on A-Grid   Tendency
       dtdt   = tempxy       ! Dry Temperature    Tendency
       dqdt   =     qv       ! Specific Humidity  Tendency
       dthdt  = vars%pt*(1.0+eps*qv)*delp
 
       call FILLOUT3 (export,  'QV_DYN_IN',      qv, rc=status); VERIFY_(STATUS)
       call FILLOUT3 (export,   'T_DYN_IN',  tempxy, rc=status); VERIFY_(STATUS)
-      call FILLOUT3 (export,   'U_DYN_IN',      ua, rc=status); VERIFY_(STATUS)
-      call FILLOUT3 (export,   'V_DYN_IN',      va, rc=status); VERIFY_(STATUS)
+      call FILLOUT3 (export,   'U_DYN_IN',      ur, rc=status); VERIFY_(STATUS)
+      call FILLOUT3 (export,   'V_DYN_IN',      vr, rc=status); VERIFY_(STATUS)
       call FILLOUT3 (export, 'PLE_DYN_IN', vars%pe, rc=status); VERIFY_(STATUS)
 
 ! Initialize 3-D Tracer Dynamics Tendencies
@@ -4074,46 +4101,14 @@ subroutine Run(gc, import, export, clock, rc)
 
     tempxy = vars%pt * (1.0+eps*qv)       ! Compute THV After Analysis Update
 
-    call Energetics (ua,va,tempxy,vars%pe,delp,vars%pkz,phisxy, kenrg0,penrg0,tenrg0,ke=ke,cpt=cpt,gze=gze)
-
+    if (doEnergetics) then
+    call Energetics (ur,vr,tempxy,vars%pe,delp,vars%pkz,phisxy, kenrg0,penrg0,tenrg0)
     kenrg = (kenrg0-kenrg)/DT
     penrg = (penrg0-penrg)/DT
     tenrg = (tenrg0-tenrg)/DT
-
     call FILLOUT2 (export, 'KEANA', kenrg, rc=status); VERIFY_(STATUS)
     call FILLOUT2 (export, 'PEANA', penrg, rc=status); VERIFY_(STATUS)
     call FILLOUT2 (export, 'TEANA', tenrg, rc=status); VERIFY_(STATUS)
-
-! Add Passive Tracers for KE, CPT, and PHI
-! ----------------------------------------
-    nq = STATE%GRID%NQ
-    if (NXQ /= 0) then
-      NKE  = nq-1
-      NPHI = nq
-      phi00 = 0.0
-      do k=1,km
-       phi(:,:,k) = ( gze(:,:,k+1)*vars%pe(:,:,k+1)-gze(:,:,k)*vars%pe(:,:,k) )/delp(:,:,k) + (1+kappa)*cpt(:,:,k)
-      phi00 = phi00 + phi(:,:,k)*delp(:,:,k)
-      enddo
-      phi00 = phi00 / grav
-      state%vars%tracer(NKE )%content => KE
-      state%vars%tracer(NPHI)%content => PHI
-      state%vars%tracer(NKE )%is_r4 = .false.
-      state%vars%tracer(NPHI)%is_r4 = .false.
-
-          deallocate( NAMES )
-            allocate( NAMES(NQ),STAT=STATUS )
-          VERIFY_(STATUS)
-          NAMES(1:NQ-NXQ) = NAMES0
-          NAMES(NQ-1) = 'KE'
-          NAMES(NQ  ) = 'PHI'
-          deallocate( NAMES0 )
-            allocate( NAMES0(NQ),STAT=STATUS )
-          VERIFY_(STATUS)
-          NAMES0 = NAMES
-    else
-      NKE  = -1
-      NPHI = -1
     endif
 
 ! Call Wrapper (DynRun) for FVDycore
@@ -4126,11 +4121,13 @@ subroutine Run(gc, import, export, clock, rc)
       LCONSV = CONSV.eq.1
       LFILL  =  FILL.eq.1
 
-! Fill c-grid winds and pressures before dynamics export
+! Fill pressures before dynamics export
 !-------------------------------------------------------
-      call getAgridWinds(vars%u, vars%v, ua, va, uc0, vc0)
       pe0=vars%pe
       call FILLOUT3r8 (export, 'PLE0', pe0, rc=status); VERIFY_(STATUS)
+   
+      call MAPL_TimerOff(MAPL,"-DYN_PROLOGUE")
+ 
 !-------------------------------------------------------
 
       call MAPL_TimerOn(MAPL,"-DYN_CORE")
@@ -4141,6 +4138,7 @@ subroutine Run(gc, import, export, clock, rc)
       dyn_run_timer = t2-t1
       call MAPL_TimerOff(MAPL,"-DYN_CORE")
 
+      call MAPL_TimerOn(MAPL,"-DYN_EPILOGUE")
 ! Computational diagnostics
 ! --------------------------
     call MAPL_GetPointer(export,temp2d,'DYNTIMER',rc=status)
@@ -4170,7 +4168,7 @@ subroutine Run(gc, import, export, clock, rc)
       VERIFY_(STATUS)
       if(associated(temp2d)) temp2d =  vars%pe(:,:,km+1)/GRAV
 
-      call getAgridWinds(vars%u, vars%v, ua, va, uc, vc)
+      call getAllWinds(vars%u, vars%v, UA=ua, VA=va, UC=uc, VC=vc, UR=ur, VR=vr, rotate=.true.)
       call FILLOUT3 (export, 'U_DGRID', vars%u  , rc=status); VERIFY_(STATUS)
       call FILLOUT3 (export, 'V_DGRID', vars%v  , rc=status); VERIFY_(STATUS)
       call FILLOUT3 (export, 'U_CGRID', uc      , rc=status); VERIFY_(STATUS)
@@ -4178,9 +4176,8 @@ subroutine Run(gc, import, export, clock, rc)
       call FILLOUT3 (export, 'U_AGRID', ua      , rc=status); VERIFY_(STATUS)
       call FILLOUT3 (export, 'V_AGRID', va      , rc=status); VERIFY_(STATUS)
 
-      call getAgridWinds(vars%u, vars%v, ua, va, rotate=.true.)
-      call FILLOUT3 (export, 'U'      , ua      , rc=status); VERIFY_(STATUS)
-      call FILLOUT3 (export, 'V'      , va      , rc=status); VERIFY_(STATUS)
+      call FILLOUT3 (export, 'U'      , ur      , rc=status); VERIFY_(STATUS)
+      call FILLOUT3 (export, 'V'      , vr      , rc=status); VERIFY_(STATUS)
 
     else               ! .not. SW_DYNAMICS
 
@@ -4213,7 +4210,6 @@ subroutine Run(gc, import, export, clock, rc)
       end if
 
 ! Compute Dry Theta and T with Unified Poles
-! ------------------------------------------
 
       tempxy  = vars%pt * vars%pkz
 
@@ -4223,10 +4219,13 @@ subroutine Run(gc, import, export, clock, rc)
       delp = ( vars%pe(:,:,2:) - vars%pe(:,:,:km) )
       pl   = ( vars%pe(:,:,2:) + vars%pe(:,:,:km) ) * 0.5
 
+! Get all wind derivatives
+! ------------------------
+      call getAllWinds(vars%u, vars%v, UA=ua, VA=va, UC=uc, VC=vc, UR=ur, VR=vr, vort=vort, divg=divg, rotate=.true.)
+
 ! Compute absolute vorticity on the D grid
 ! -------------------------------------------------
-      call getVorticity(vars%u, vars%v, tmp3d)
-      call getEPV(vars%pt,tmp3d,ua,va,epvxyz)
+      call getEPV(vars%pt,vort,ua,va,epvxyz)
       call MAPL_GetPointer(export, temp3D, 'EPV', rc=status)
       VERIFY_(STATUS)
       if(associated(temp3d)) temp3d = epvxyz*(p00**kappa)
@@ -4234,6 +4233,24 @@ subroutine Run(gc, import, export, clock, rc)
 ! Compute Tropopause Pressure, Temperature, and Moisture
 ! ------------------------------------------------------
 
+      doTropvars=.false.
+      call MAPL_GetPointer(export,temp2D,'TROPP_THERMAL',rc=status); VERIFY_(STATUS)
+      if(associated(temp2D)) doTropvars=.true.
+      call MAPL_GetPointer(export,temp2D,'TROPP_EPV',rc=status); VERIFY_(STATUS)
+      if(associated(temp2D)) doTropvars=.true.
+      call MAPL_GetPointer(export,temp2D,'TROPP_BLENDED',rc=status); VERIFY_(STATUS)
+      if(associated(temp2D)) doTropvars=.true.
+      call MAPL_GetPointer(export,temp2D,'TROPT',rc=status); VERIFY_(STATUS)
+      if(associated(temp2D)) doTropvars=.true.
+      call MAPL_GetPointer(export,temp2D,'TROPQ',rc=status); VERIFY_(STATUS)
+      if(associated(temp2D)) doTropvars=.true.
+
+      if (doTropvars) then
+         ALLOCATE( tropp1 (ifirstxy:ilastxy,jfirstxy:jlastxy) )
+         ALLOCATE( tropp2 (ifirstxy:ilastxy,jfirstxy:jlastxy) )
+         ALLOCATE( tropp3 (ifirstxy:ilastxy,jfirstxy:jlastxy) )
+         ALLOCATE( tropt  (ifirstxy:ilastxy,jfirstxy:jlastxy) )
+         ALLOCATE( tropq  (ifirstxy:ilastxy,jfirstxy:jlastxy) )
          call tropovars ( ilastxy-ifirstxy+1,jlastxy-jfirstxy+1,km, &
                           real(vars%pe            ,kind=4),         &
                           real(pl                 ,kind=4),         &
@@ -4242,29 +4259,35 @@ subroutine Run(gc, import, export, clock, rc)
                           real(epvxyz*(p00**kappa),kind=4),         &
                           tropp1,tropp2,tropp3,tropt,tropq          )
 
-      call MAPL_GetPointer(export,temp2D,'TROPP_THERMAL',rc=status)
-      VERIFY_(STATUS)
-      if(associated(temp2D)) temp2D = tropp1
+         call MAPL_GetPointer(export,temp2D,'TROPP_THERMAL',rc=status)
+         VERIFY_(STATUS)
+         if(associated(temp2D)) temp2D = tropp1
 
-      call MAPL_GetPointer(export,temp2D,'TROPP_EPV',rc=status)
-      VERIFY_(STATUS)
-      if(associated(temp2D)) temp2D = tropp2
+         call MAPL_GetPointer(export,temp2D,'TROPP_EPV',rc=status)
+         VERIFY_(STATUS)
+         if(associated(temp2D)) temp2D = tropp2
 
-      call MAPL_GetPointer(export,temp2D,'TROPP_BLENDED',rc=status)
-      VERIFY_(STATUS)
-      if(associated(temp2D)) temp2D = tropp3
+         call MAPL_GetPointer(export,temp2D,'TROPP_BLENDED',rc=status)
+         VERIFY_(STATUS)
+         if(associated(temp2D)) temp2D = tropp3
 
-      call MAPL_GetPointer(export,temp2D,'TROPT',rc=status)
-      VERIFY_(STATUS)
-      if(associated(temp2D)) temp2D = tropt
+         call MAPL_GetPointer(export,temp2D,'TROPT',rc=status)
+         VERIFY_(STATUS)
+         if(associated(temp2D)) temp2D = tropt
 
-      call MAPL_GetPointer(export,temp2D,'TROPQ',rc=status)
-      VERIFY_(STATUS)
-      if(associated(temp2D)) temp2D = tropq
+         call MAPL_GetPointer(export,temp2D,'TROPQ',rc=status)
+         VERIFY_(STATUS)
+         if(associated(temp2D)) temp2D = tropq
+
+         DEALLOCATE( tropp1 )
+         DEALLOCATE( tropp2 )
+         DEALLOCATE( tropp3 )
+         DEALLOCATE( tropt  )
+         DEALLOCATE( tropq  )
+      endif
 
 ! Get Cubed-Sphere Wind Exports
 ! -----------------------------
-      call getAgridWinds(vars%u, vars%v, ua, va, uc, vc)
       call FILLOUT3 (export, 'U_DGRID', vars%u  , rc=status); VERIFY_(STATUS)
       call FILLOUT3 (export, 'V_DGRID', vars%v  , rc=status); VERIFY_(STATUS)
       call FILLOUT3 (export, 'U_CGRID', uc      , rc=status); VERIFY_(STATUS)
@@ -4272,18 +4295,14 @@ subroutine Run(gc, import, export, clock, rc)
       call FILLOUT3 (export, 'U_AGRID', ua      , rc=status); VERIFY_(STATUS)
       call FILLOUT3 (export, 'V_AGRID', va      , rc=status); VERIFY_(STATUS)
 
-! Compute A-Grid Winds
-! --------------------
-      call getAgridWinds(vars%u, vars%v, ua, va, rotate=.true.)
-
 ! Compute Diagnostic Dynamics Tendencies
 !  (Note: initial values of d(m,u,v,T,q)/dt are progs m,u,v,T,q)
 ! --------------------------------------------------------------
 
       dmdt = ( vars%pe(:,:,km+1)-vars%pe(:,:,1) - dmdt )/(grav*dt)
 
-      dudt = (    ua-dudt )/dt
-      dvdt = (    va-dvdt )/dt
+      dudt = (    ur-dudt )/dt
+      dvdt = (    vr-dvdt )/dt
       dtdt = (  tempxy-dtdt )/dt
       dqdt = (      qv-dqdt )/dt
 
@@ -4306,22 +4325,8 @@ subroutine Run(gc, import, export, clock, rc)
       ! Compute time-centered C-Grid Courant Numbers and Mass Fluxes on Cubed Orientation
         uc0 = 0.5*(uc +uc0)
         vc0 = 0.5*(vc +vc0)
-        gze = 0.5*(pe1+pe0)
-
-       ! truncate precision to R4 and back to R8
-       !do k=1,km
-       !  dummy(:,:,1)=R8_TO_R4(  uc0(:,:,k))
-       !    uc0(:,:,k)=R4_TO_R8(dummy(:,:,1))
-       !  dummy(:,:,1)=R8_TO_R4(  vc0(:,:,k))
-       !    vc0(:,:,k)=R4_TO_R8(dummy(:,:,1))
-       !enddo
-       !do k=1,km+1
-       !  dummy(:,:,1)=R8_TO_R4(  gze(:,:,k))
-       !    gze(:,:,k)=R4_TO_R8(dummy(:,:,1))
-       !enddo
-       ! truncate precision to R4 and back to R8
-
-        call computeMassFluxes(uc0, vc0, gze, mfxxyz, mfyxyz, cxxyz, cyxyz, dt)
+        pe0 = 0.5*(pe1+pe0)
+        call computeMassFluxes(uc0, vc0, pe0, mfxxyz, mfyxyz, cxxyz, cyxyz, dt)
         call FILLOUT3r8 (export, 'CX'  , cxxyz  , rc=status); VERIFY_(STATUS)
         call FILLOUT3r8 (export, 'CY'  , cyxyz  , rc=status); VERIFY_(STATUS)
         call FILLOUT3r8 (export, 'MFX' , mfxxyz , rc=status); VERIFY_(STATUS)
@@ -4344,8 +4349,8 @@ subroutine Run(gc, import, export, clock, rc)
       call getVerticalMassFlux(mfxxyz, mfyxyz, mfzxyz, dt)
       call FILLOUT3r8 (export, 'MFZ' , mfzxyz , rc=status); VERIFY_(STATUS)
 
-      call FILLOUT3 (export, 'U'      , ua      , rc=status); VERIFY_(STATUS)
-      call FILLOUT3 (export, 'V'      , va      , rc=status); VERIFY_(STATUS)
+      call FILLOUT3 (export, 'U'      , ur      , rc=status); VERIFY_(STATUS)
+      call FILLOUT3 (export, 'V'      , vr      , rc=status); VERIFY_(STATUS)
       call FILLOUT3 (export, 'T'      , tempxy  , rc=status); VERIFY_(STATUS)
       call FILLOUT3 (export, 'Q'      , qv      , rc=status); VERIFY_(STATUS)
       call FILLOUT3 (export, 'PL'     , pl      , rc=status); VERIFY_(STATUS)
@@ -4548,7 +4553,7 @@ subroutine Run(gc, import, export, clock, rc)
       if(associated(temp2d)) then
          temp2d = 0.0
          do k=1,km
-            temp2d = temp2d + ua(:,:,k)*tempxy(:,:,k)*delp(:,:,k)
+            temp2d = temp2d + ur(:,:,k)*tempxy(:,:,k)*delp(:,:,k)
          enddo
          temp2d = temp2d*(cp/grav)
       end if
@@ -4558,7 +4563,7 @@ subroutine Run(gc, import, export, clock, rc)
       if(associated(temp2d)) then
          temp2d = 0.0
          do k=1,km
-            temp2d = temp2d + va(:,:,k)*tempxy(:,:,k)*delp(:,:,k)
+            temp2d = temp2d + vr(:,:,k)*tempxy(:,:,k)*delp(:,:,k)
          enddo
          temp2d = temp2d*(cp/grav)
       end if
@@ -4572,23 +4577,21 @@ subroutine Run(gc, import, export, clock, rc)
       VERIFY_(STATUS)
       if(associated(temp3d)) temp3d = tempxy
 
-      call Energetics (ua,va,tempxy,vars%pe,delp,vars%pkz,phisxy,kenrg,penrg,tenrg)
-
+      if (doEnergetics) then
+      call Energetics (ur,vr,tempxy,vars%pe,delp,vars%pkz,phisxy,kenrg,penrg,tenrg)
       kedyn   = (kenrg -kenrg0)/DT
       pedyn   = (penrg -penrg0)/DT
       tedyn   = (tenrg -tenrg0)/DT
-
       call MAPL_GetPointer(export,temp2d,'KEDYN',rc=status)
       VERIFY_(STATUS)
       if(associated(temp2d)) temp2d = kedyn
-
       call MAPL_GetPointer(export,temp2d,'PEDYN',rc=status)
       VERIFY_(STATUS)
       if(associated(temp2d)) temp2d = pedyn
-
       call MAPL_GetPointer(export,temp2d,'TEDYN',rc=status)
       VERIFY_(STATUS)
       if(associated(temp2d)) temp2d = tedyn
+      endif
 
 ! Compute/Get Omega
 ! --------------------------
@@ -4605,13 +4608,13 @@ subroutine Run(gc, import, export, clock, rc)
       call MAPL_GetPointer(export,tempv,'VKE',rc=status); VERIFY_(STATUS)
 
       if(associated(tempu) .or. associated(tempv)) then
-         ke = 0.5*(ua**2 + va**2)
+         tmp3d = 0.5*(ur**2 + vr**2)
       end if
 
       if(associated(tempu)) then
          tempu = 0.0
          do k=1,km
-            tempu = tempu + ua(:,:,k)*ke(:,:,k)*delp(:,:,k)
+            tempu = tempu + ur(:,:,k)*tmp3d(:,:,k)*delp(:,:,k)
          enddo
          tempu = tempu / grav
       end if
@@ -4619,7 +4622,7 @@ subroutine Run(gc, import, export, clock, rc)
       if(associated(tempv)) then
          tempv = 0.0
          do k=1,km
-            tempv = tempv + va(:,:,k)*ke(:,:,k)*delp(:,:,k)
+            tempv = tempv + vr(:,:,k)*tmp3d(:,:,k)*delp(:,:,k)
          enddo
          tempv = tempv / grav
       end if
@@ -4631,7 +4634,7 @@ subroutine Run(gc, import, export, clock, rc)
       if(associated(temp2d)) then
          temp2d = 0.0
          do k=1,km
-            temp2d = temp2d + ua(:,:,k)*QV(:,:,k)*delp(:,:,k)
+            temp2d = temp2d + ur(:,:,k)*QV(:,:,k)*delp(:,:,k)
          enddo
          temp2d = temp2d / grav
       end if
@@ -4641,7 +4644,7 @@ subroutine Run(gc, import, export, clock, rc)
       if(associated(temp2d)) then
          temp2d = 0.0
          do k=1,km
-            temp2d = temp2d + va(:,:,k)*QV(:,:,k)*delp(:,:,k)
+            temp2d = temp2d + vr(:,:,k)*QV(:,:,k)*delp(:,:,k)
          enddo
          temp2d = temp2d / grav
       end if
@@ -4657,9 +4660,9 @@ subroutine Run(gc, import, export, clock, rc)
                  trim(names(n)).eq.'QLLS' ) then
                  do k=1,km
                  if( state%vars%tracer(n)%is_r4 ) then 
-                      temp2d = temp2d + ua(:,:,k)*state%vars%tracer(n)%content_r4(:,:,k)*delp(:,:,k)
+                      temp2d = temp2d + ur(:,:,k)*state%vars%tracer(n)%content_r4(:,:,k)*delp(:,:,k)
                  else
-                      temp2d = temp2d + ua(:,:,k)*state%vars%tracer(n)%content   (:,:,k)*delp(:,:,k)
+                      temp2d = temp2d + ur(:,:,k)*state%vars%tracer(n)%content   (:,:,k)*delp(:,:,k)
                  endif
                  enddo
              endif
@@ -4676,9 +4679,9 @@ subroutine Run(gc, import, export, clock, rc)
                  trim(names(n)).eq.'QLLS' ) then
                  do k=1,km
                  if( state%vars%tracer(n)%is_r4 ) then 
-                      temp2d = temp2d + va(:,:,k)*state%vars%tracer(n)%content_r4(:,:,k)*delp(:,:,k)
+                      temp2d = temp2d + vr(:,:,k)*state%vars%tracer(n)%content_r4(:,:,k)*delp(:,:,k)
                  else
-                      temp2d = temp2d + va(:,:,k)*state%vars%tracer(n)%content   (:,:,k)*delp(:,:,k)
+                      temp2d = temp2d + vr(:,:,k)*state%vars%tracer(n)%content   (:,:,k)*delp(:,:,k)
                  endif
                  enddo
              endif
@@ -4697,9 +4700,9 @@ subroutine Run(gc, import, export, clock, rc)
                  trim(names(n)).eq.'QILS' ) then
                  do k=1,km
                  if( state%vars%tracer(n)%is_r4 ) then 
-                      temp2d = temp2d + ua(:,:,k)*state%vars%tracer(n)%content_r4(:,:,k)*delp(:,:,k)
+                      temp2d = temp2d + ur(:,:,k)*state%vars%tracer(n)%content_r4(:,:,k)*delp(:,:,k)
                  else
-                      temp2d = temp2d + ua(:,:,k)*state%vars%tracer(n)%content   (:,:,k)*delp(:,:,k)
+                      temp2d = temp2d + ur(:,:,k)*state%vars%tracer(n)%content   (:,:,k)*delp(:,:,k)
                  endif
                  enddo
              endif
@@ -4716,9 +4719,9 @@ subroutine Run(gc, import, export, clock, rc)
                  trim(names(n)).eq.'QILS' ) then
                  do k=1,km
                  if( state%vars%tracer(n)%is_r4 ) then 
-                      temp2d = temp2d + va(:,:,k)*state%vars%tracer(n)%content_r4(:,:,k)*delp(:,:,k)
+                      temp2d = temp2d + vr(:,:,k)*state%vars%tracer(n)%content_r4(:,:,k)*delp(:,:,k)
                  else
-                      temp2d = temp2d + va(:,:,k)*state%vars%tracer(n)%content   (:,:,k)*delp(:,:,k)
+                      temp2d = temp2d + vr(:,:,k)*state%vars%tracer(n)%content   (:,:,k)*delp(:,:,k)
                  endif
                  enddo
              endif
@@ -4756,14 +4759,14 @@ subroutine Run(gc, import, export, clock, rc)
       if(associated(tempu)) then
          tempu = 0.0
          do k=1,km
-            tempu = tempu + ua(:,:,k)*zl(:,:,k)*delp(:,:,k)
+            tempu = tempu + ur(:,:,k)*zl(:,:,k)*delp(:,:,k)
          enddo
       end if
 
       if(associated(tempv)) then
          tempv = 0.0
          do k=1,km
-            tempv = tempv + va(:,:,k)*zl(:,:,k)*delp(:,:,k)
+            tempv = tempv + vr(:,:,k)*zl(:,:,k)*delp(:,:,k)
          enddo
       end if
 
@@ -4791,14 +4794,14 @@ subroutine Run(gc, import, export, clock, rc)
       call MAPL_GetPointer(export,temp2d,'US',  rc=status)
       VERIFY_(STATUS)
       if(associated(temp2d)) then
-         call VertInterp(temp2d,ua,-zle,-HGT_SURFACE, status)
+         call VertInterp(temp2d,ur,-zle,-HGT_SURFACE, status)
          VERIFY_(STATUS)
       end if
 
       call MAPL_GetPointer(export,temp2d,'VS'   ,rc=status)
       VERIFY_(STATUS)
       if(associated(temp2d)) then
-         call VertInterp(temp2d,va,-zle,-HGT_SURFACE, status)
+         call VertInterp(temp2d,vr,-zle,-HGT_SURFACE, status)
          VERIFY_(STATUS)
       end if
 
@@ -4820,7 +4823,7 @@ subroutine Run(gc, import, export, clock, rc)
       call MAPL_GetPointer(export,temp2d,'SPEED',rc=status)
       VERIFY_(STATUS)
       if(associated(temp2d)) then
-         call VertInterp(temp2d,sqrt(ua**2 + va**2),-zle,-HGT_SURFACE, status)
+         call VertInterp(temp2d,sqrt(ur**2 + vr**2),-zle,-HGT_SURFACE, status)
          VERIFY_(STATUS)
       end if
     else
@@ -4836,11 +4839,11 @@ subroutine Run(gc, import, export, clock, rc)
 
       call MAPL_GetPointer(export,temp2d,'US',  rc=status)
       VERIFY_(STATUS)
-      if(associated(temp2d)) temp2d =       ua(:,:,km)
+      if(associated(temp2d)) temp2d =       ur(:,:,km)
 
       call MAPL_GetPointer(export,temp2d,'VS'   ,rc=status)
       VERIFY_(STATUS)
-      if(associated(temp2d)) temp2d =       va(:,:,km)
+      if(associated(temp2d)) temp2d =       vr(:,:,km)
 
       call MAPL_GetPointer(export,temp2d,'TA'   ,rc=status)
       VERIFY_(STATUS)
@@ -4855,7 +4858,7 @@ subroutine Run(gc, import, export, clock, rc)
 
       call MAPL_GetPointer(export,temp2d,'SPEED',rc=status)
       VERIFY_(STATUS)
-      if(associated(temp2d)) temp2d = sqrt( ua(:,:,km)**2 + va(:,:,km)**2 )
+      if(associated(temp2d)) temp2d = sqrt( ur(:,:,km)**2 + vr(:,:,km)**2 )
    endif
 
 ! Updraft Helicty Export
@@ -4871,73 +4874,69 @@ subroutine Run(gc, import, export, clock, rc)
 
       zle = log(vars%pe)
 
-      call getDivergence(uc, vc, tmp3d)
-
       call MAPL_GetPointer(export,temp3d,'DIVG',  rc=status)
       VERIFY_(STATUS)
-      if(associated(temp3d)) temp3d = tmp3d
+      if(associated(temp3d)) temp3d = divg
 
       call MAPL_GetPointer(export,temp2d,'DIVG200',  rc=status)
       VERIFY_(STATUS)
       if(associated(temp2d)) then
-         call VertInterp(temp2d,dble(tmp3d),zle,log(20000.)  ,  status)
+         call VertInterp(temp2d,dble(divg),zle,log(20000.)  ,  status)
          VERIFY_(STATUS)
       end if
 
       call MAPL_GetPointer(export,temp2d,'DIVG500',  rc=status)
       VERIFY_(STATUS)
       if(associated(temp2d)) then
-         call VertInterp(temp2d,dble(tmp3d),zle,log(50000.)  ,  status)
+         call VertInterp(temp2d,dble(divg),zle,log(50000.)  ,  status)
          VERIFY_(STATUS)
       end if
 
       call MAPL_GetPointer(export,temp2d,'DIVG700',  rc=status)
       VERIFY_(STATUS)
       if(associated(temp2d)) then
-         call VertInterp(temp2d,dble(tmp3d),zle,log(70000.)  ,  status)
+         call VertInterp(temp2d,dble(divg),zle,log(70000.)  ,  status)
          VERIFY_(STATUS)
       end if
 
       call MAPL_GetPointer(export,temp2d,'DIVG850',  rc=status)
       VERIFY_(STATUS)
       if(associated(temp2d)) then
-         call VertInterp(temp2d,dble(tmp3d),zle,log(85000.)  ,  status)
+         call VertInterp(temp2d,dble(divg),zle,log(85000.)  ,  status)
          VERIFY_(STATUS)
        end if
 
 ! Vorticity Exports
 
-      call getVorticity(vars%u, vars%v, tmp3d)
-  
       call MAPL_GetPointer(export,temp3d,'VORT',  rc=status)
       VERIFY_(STATUS)
-      if(associated(temp3d)) temp3d = tmp3d
+      if(associated(temp3d)) temp3d = vort
   
       call MAPL_GetPointer(export,temp2d,'VORT200',  rc=status)
       VERIFY_(STATUS)
       if(associated(temp2d)) then
-         call VertInterp(temp2d,dble(tmp3d),zle,log(20000.)  ,  status)
+         call VertInterp(temp2d,dble(vort),zle,log(20000.)  ,  status)
          VERIFY_(STATUS)
       end if
 
       call MAPL_GetPointer(export,temp2d,'VORT500',  rc=status)
       VERIFY_(STATUS)
       if(associated(temp2d)) then
-         call VertInterp(temp2d,dble(tmp3d),zle,log(50000.)  ,  status)
+         call VertInterp(temp2d,dble(vort),zle,log(50000.)  ,  status)
          VERIFY_(STATUS)
       end if
  
       call MAPL_GetPointer(export,temp2d,'VORT700',  rc=status)
       VERIFY_(STATUS)
       if(associated(temp2d)) then
-         call VertInterp(temp2d,dble(tmp3d),zle,log(70000.)  ,  status)
+         call VertInterp(temp2d,dble(vort),zle,log(70000.)  ,  status)
          VERIFY_(STATUS)
       end if
 
       call MAPL_GetPointer(export,temp2d,'VORT850',  rc=status)
       VERIFY_(STATUS)
       if(associated(temp2d)) then
-         call VertInterp(temp2d,dble(tmp3d),zle,log(85000.)  ,  status)
+         call VertInterp(temp2d,dble(vort),zle,log(85000.)  ,  status)
          VERIFY_(STATUS)
        end if
 
@@ -5016,30 +5015,12 @@ subroutine Run(gc, import, export, clock, rc)
 
      end if   ! SW_DYNAMICS
       
-  
+      call MAPL_TimerOff(MAPL,"-DYN_EPILOGUE")
+ 
 ! De-Allocate Arrays
 ! ------------------
 
-      DEALLOCATE( dummy        )
-      DEALLOCATE( dqvdtanaint1 )
-      DEALLOCATE( dqvdtanaint2 )
-      DEALLOCATE( dqldtanaint1 )
-      DEALLOCATE( dqldtanaint2 )
-      DEALLOCATE( dqidtanaint1 )
-      DEALLOCATE( dqidtanaint2 )
-      DEALLOCATE( doxdtanaint1 )
-      DEALLOCATE( doxdtanaint2 )
-      DEALLOCATE( dthdtanaint1 )
-      DEALLOCATE( dthdtanaint2 )
-      DEALLOCATE( dthdtremap   )
-      DEALLOCATE( dthdtconsv   )
-
-      DEALLOCATE( TROPP1 )
-      DEALLOCATE( TROPP2 )
-      DEALLOCATE( TROPP3 )
-      DEALLOCATE( TROPT  )
-      DEALLOCATE( TROPQ  )
-
+      if (doEnergetics) then
       DEALLOCATE( KEDYN  )
       DEALLOCATE( PEDYN  )
       DEALLOCATE( TEDYN  )
@@ -5049,35 +5030,8 @@ subroutine Run(gc, import, export, clock, rc)
       DEALLOCATE( KENRG0 )
       DEALLOCATE( PENRG0 )
       DEALLOCATE( TENRG0 )
+      endif
 
-#ifdef ENERGETICS
-      DEALLOCATE( KEPG   )
-      DEALLOCATE( KEADV  )
-      DEALLOCATE( KEDP   )
-      DEALLOCATE( KEHOT  )
-      DEALLOCATE( KEGEN  )
-      DEALLOCATE( KECDCOR)
-      DEALLOCATE( PECDCOR)
-      DEALLOCATE( TECDCOR)
-      DEALLOCATE( KEREMAP)
-      DEALLOCATE( PEREMAP)
-      DEALLOCATE( TEREMAP)
-      DEALLOCATE( CONVKE )
-      DEALLOCATE( CONVCPT)
-      DEALLOCATE( CONVPHI)
-      DEALLOCATE( CONVTHV)
-      DEALLOCATE( KENRGA )
-      DEALLOCATE( PENRGA )
-      DEALLOCATE( TENRGA )
-      DEALLOCATE( KENRGB )
-      DEALLOCATE( PENRGB )
-      DEALLOCATE( TENRGB )
-#endif
-
-      DEALLOCATE( ke    )
-      DEALLOCATE( cpt   )
-      DEALLOCATE( phi   )
-      DEALLOCATE( gze   )
       DEALLOCATE( qsum1 )
       DEALLOCATE( qsum2 )
 
@@ -5085,11 +5039,10 @@ subroutine Run(gc, import, export, clock, rc)
       DEALLOCATE( zle    )
       DEALLOCATE( plk    )
       DEALLOCATE( pkxy   )
+      DEALLOCATE( vort   )
+      DEALLOCATE( divg   )
       DEALLOCATE( tmp3d  )
-      DEALLOCATE( tmp2d  )
       DEALLOCATE( omaxyz )
-      DEALLOCATE( cptxyz )
-      DEALLOCATE( thvxyz )
       DEALLOCATE( epvxyz )
       DEALLOCATE(  cxxyz )
       DEALLOCATE(  cyxyz )
@@ -5106,23 +5059,16 @@ subroutine Run(gc, import, export, clock, rc)
       DEALLOCATE( vc     )
       DEALLOCATE( uc0    )
       DEALLOCATE( vc0    )
+      DEALLOCATE( ur     )
+      DEALLOCATE( vr     )
       DEALLOCATE( qv     )
       DEALLOCATE( ql     )
       DEALLOCATE( qi     )
       DEALLOCATE( qr     )
       DEALLOCATE( qs     )
       DEALLOCATE( qg     )
-      DEALLOCATE( qdnew  )
-      DEALLOCATE( qdold  )
-      DEALLOCATE( qvold  )
-      DEALLOCATE( qlold  )
-      DEALLOCATE( qiold  )
-      DEALLOCATE( qrold  )
-      DEALLOCATE( qsold  )
-      DEALLOCATE( qgold  )
       DEALLOCATE( ox     )
       DEALLOCATE( delp   )
-      DEALLOCATE( delpold)
       DEALLOCATE( dmdt   )
       DEALLOCATE( dudt   )
       DEALLOCATE( dvdt   )
@@ -5134,7 +5080,6 @@ subroutine Run(gc, import, export, clock, rc)
       DEALLOCATE( phisxy )
       if (allocated(names)) DEALLOCATE( names  )
       if (allocated(names0)) DEALLOCATE( names0  )
-      DEALLOCATE( phi00  )
 
       call freeTracers(state)
 
@@ -5315,7 +5260,7 @@ subroutine dump_n_splash_
           allocate( UAtmpR4(grid%is:grid%ie  ,grid%js:grid%je  ,km) )
           allocate( VAtmpR4(grid%is:grid%ie  ,grid%js:grid%je  ,km) )
           ! get background A-grid winds 
-          call getAgridWinds (vars%u,vars%v,ana_u,ana_v,rotate=.true.)
+          call getAllWinds (vars%u,vars%v,UR=ana_u,VR=ana_v,rotate=.true.)
           ! transform background A-grid winds to lat-lon
           call regridder_manager%make_regridder(ESMFGRID, ANAGrid, REGRID_METHOD_BILINEAR, RC=STATUS)
           VERIFY_(STATUS)
@@ -6116,7 +6061,6 @@ end subroutine RUN
     real(r8), allocatable ::  H1000(:,:)
     real(r8), allocatable ::  H850 (:,:)
     real(r8), allocatable ::  H500 (:,:)
-    real(r8), allocatable ::  tmp2d(:,:)
     real(r8), allocatable ::  tmp3d(:,:,:)
     real(r8), allocatable ::    plk(:,:,:)
     real(r8), allocatable ::    pke(:,:,:)
@@ -6125,6 +6069,8 @@ end subroutine RUN
     real(r8), allocatable ::     va(:,:,:)
     real(r8), allocatable ::     uc(:,:,:)
     real(r8), allocatable ::     vc(:,:,:)
+    real(r8), allocatable ::     ur(:,:,:)
+    real(r8), allocatable ::     vr(:,:,:)
     real(r8), allocatable ::     qv(:,:,:)
     real(r8), allocatable ::     dp(:,:,:)
     real(r8), allocatable ::    thv(:,:,:)
@@ -6151,6 +6097,8 @@ end subroutine RUN
     real(kind=4), allocatable :: dthdtphyint1(:,:)
     real(kind=4), allocatable :: dthdtphyint2(:,:)
 
+    logical :: doEnergetics 
+
     integer i,j,k
 
     character(len=ESMF_MAXSTR) :: COMP_NAME
@@ -6195,15 +6143,25 @@ end subroutine RUN
     ALLOCATE( dthdtphyint1(ifirstxy:ilastxy,jfirstxy:jlastxy) )
     ALLOCATE( dthdtphyint2(ifirstxy:ilastxy,jfirstxy:jlastxy) )
 
+    doEnergetics=.false.
+    call MAPL_GetPointer(export,temp2D,'KE'   ,rc=status); VERIFY_(STATUS)
+    if(associated(temp2D)) doEnergetics=.true.
+    call MAPL_GetPointer(export,temp2D,'KEPHY',rc=status); VERIFY_(STATUS)
+    if(associated(temp2D)) doEnergetics=.true.
+    call MAPL_GetPointer(export,temp2D,'PEPHY',rc=status); VERIFY_(STATUS)
+    if(associated(temp2D)) doEnergetics=.true.
+    call MAPL_GetPointer(export,temp2D,'TEPHY',rc=status); VERIFY_(STATUS)
+    if(associated(temp2D)) doEnergetics=.true.
+    if (doEnergetics) then
     ALLOCATE(  kenrg(ifirstxy:ilastxy,jfirstxy:jlastxy) )
     ALLOCATE(  penrg(ifirstxy:ilastxy,jfirstxy:jlastxy) )
     ALLOCATE(  tenrg(ifirstxy:ilastxy,jfirstxy:jlastxy) )
     ALLOCATE( kenrg0(ifirstxy:ilastxy,jfirstxy:jlastxy) )
     ALLOCATE( penrg0(ifirstxy:ilastxy,jfirstxy:jlastxy) )
     ALLOCATE( tenrg0(ifirstxy:ilastxy,jfirstxy:jlastxy) )
+    endif
 
     ALLOCATE(  tmp3d(ifirstxy:ilastxy,jfirstxy:jlastxy,km) )
-    ALLOCATE(  tmp2d(ifirstxy:ilastxy,jfirstxy:jlastxy) )
     ALLOCATE( phisxy(ifirstxy:ilastxy,jfirstxy:jlastxy) )
     ALLOCATE(  logps(ifirstxy:ilastxy,jfirstxy:jlastxy) )
 
@@ -6211,6 +6169,8 @@ end subroutine RUN
     ALLOCATE(     va(ifirstxy:ilastxy,jfirstxy:jlastxy,km)   )
     ALLOCATE(     uc(ifirstxy:ilastxy,jfirstxy:jlastxy,km)   )
     ALLOCATE(     vc(ifirstxy:ilastxy,jfirstxy:jlastxy,km)   )
+    ALLOCATE(     ur(ifirstxy:ilastxy,jfirstxy:jlastxy,km)   )
+    ALLOCATE(     vr(ifirstxy:ilastxy,jfirstxy:jlastxy,km)   )
     ALLOCATE(     qv(ifirstxy:ilastxy,jfirstxy:jlastxy,km)   )
     ALLOCATE(     pl(ifirstxy:ilastxy,jfirstxy:jlastxy,km)   )
     ALLOCATE(  logpl(ifirstxy:ilastxy,jfirstxy:jlastxy,km)   )
@@ -6234,10 +6194,6 @@ end subroutine RUN
 
     dp = ( vars%pe(:,:,2:) - vars%pe (:,:,:km) )
 
-! Get A-grid winds
-! ----------------
-  call getAgridWinds(vars%u, vars%v, ua, va, rotate=.true.)
-
 ! Load Specific Humidity
 ! ----------------------
 
@@ -6263,7 +6219,10 @@ end subroutine RUN
        thv = vars%pt
     endif
 
-    call Energetics (ua,va,thv,vars%pe,dp,vars%pkz,phisxy,kenrg0,penrg0,tenrg0)
+    if (doEnergetics) then
+      call getAllWinds(vars%u, vars%v, UA=ua, VA=va, UC=uc, VC=vc, UR=ur, VR=vr, rotate=.true.)
+      call Energetics (ur,vr,thv,vars%pe,dp,vars%pkz,phisxy,kenrg0,penrg0,tenrg0)
+    endif
 
 ! DTHVDTPHYINT
 ! ------------
@@ -6294,7 +6253,7 @@ end subroutine RUN
 
 ! Get Cubed-Sphere Wind Exports
 ! -----------------------------
-    call getAgridWinds(vars%u, vars%v, ua, va, uc, vc)
+    call getAllWinds(vars%u, vars%v, UA=ua, VA=va, UC=uc, VC=vc, UR=ur, VR=vr, rotate=.true.)
     call FILLOUT3 (export, 'U_DGRID', vars%u  , rc=status); VERIFY_(STATUS)
     call FILLOUT3 (export, 'V_DGRID', vars%v  , rc=status); VERIFY_(STATUS)
     call FILLOUT3 (export, 'U_CGRID', uc      , rc=status); VERIFY_(STATUS)
@@ -6302,10 +6261,6 @@ end subroutine RUN
     call FILLOUT3 (export, 'U_AGRID', ua      , rc=status); VERIFY_(STATUS)
     call FILLOUT3 (export, 'V_AGRID', va      , rc=status); VERIFY_(STATUS)
  
-! Create A-Grid Winds
-! -------------------
-    call getAgridWinds(vars%u, vars%v, ua, va, rotate=.true.)
-
 ! Compute Energetics After Diabatic Forcing
 ! -----------------------------------------
 
@@ -6315,19 +6270,18 @@ end subroutine RUN
   call Write_Profile(grid, thv, 'VPT')
 #endif
 
-    call Energetics (ua,va,thv,vars%pe,dp,vars%pkz,phisxy,kenrg,penrg,tenrg)
-
-    call MAPL_GetPointer(export,temp2d,'KE',  rc=status)
-    VERIFY_(STATUS)
-    if(associated(temp2d)) temp2d = kenrg
-
-    kenrg = (kenrg-kenrg0)/DT
-    penrg = (penrg-penrg0)/DT
-    tenrg = (tenrg-tenrg0)/DT
-
-    call FILLOUT2 (export, 'KEPHY', kenrg, rc=status); VERIFY_(STATUS)
-    call FILLOUT2 (export, 'PEPHY', penrg, rc=status); VERIFY_(STATUS)
-    call FILLOUT2 (export, 'TEPHY', tenrg, rc=status); VERIFY_(STATUS)
+    if (doEnergetics) then
+      call Energetics (ur,vr,thv,vars%pe,dp,vars%pkz,phisxy,kenrg,penrg,tenrg)
+      call MAPL_GetPointer(export,temp2d,'KE',  rc=status)
+      VERIFY_(STATUS)
+      if(associated(temp2d)) temp2d = kenrg
+      kenrg = (kenrg-kenrg0)/DT
+      penrg = (penrg-penrg0)/DT
+      tenrg = (tenrg-tenrg0)/DT
+      call FILLOUT2 (export, 'KEPHY', kenrg, rc=status); VERIFY_(STATUS)
+      call FILLOUT2 (export, 'PEPHY', penrg, rc=status); VERIFY_(STATUS)
+      call FILLOUT2 (export, 'TEPHY', tenrg, rc=status); VERIFY_(STATUS)
+    endif
 
 ! DTHVDTPHYINT
 ! ------------
@@ -6351,8 +6305,8 @@ end subroutine RUN
 #endif
 
     call FILLOUT3 (export, 'DELP'   , dp      , rc=status); VERIFY_(STATUS)
-    call FILLOUT3 (export, 'U'      , ua      , rc=status); VERIFY_(STATUS)
-    call FILLOUT3 (export, 'V'      , va      , rc=status); VERIFY_(STATUS)
+    call FILLOUT3 (export, 'U'      , ur      , rc=status); VERIFY_(STATUS)
+    call FILLOUT3 (export, 'V'      , vr      , rc=status); VERIFY_(STATUS)
     call FILLOUT3 (export, 'T'      , tempxy  , rc=status); VERIFY_(STATUS)
     call FILLOUT3 (export, 'Q'      , qv      , rc=status); VERIFY_(STATUS)
     call FILLOUT3 (export, 'PL'     , pl      , rc=status); VERIFY_(STATUS)
@@ -6408,70 +6362,70 @@ end subroutine RUN
     call MAPL_GetPointer(export,temp2d,'U200',  rc=status)
     VERIFY_(STATUS)
     if(associated(temp2d)) then
-       call VertInterp(temp2d,ua,pke,log(20000.)  ,  status)
+       call VertInterp(temp2d,ur,pke,log(20000.)  ,  status)
        VERIFY_(STATUS)
     end if
  
     call MAPL_GetPointer(export,temp2d,'U250',  rc=status)
     VERIFY_(STATUS)
     if(associated(temp2d)) then
-       call VertInterp(temp2d,ua,pke,log(25000.)  ,  status)
+       call VertInterp(temp2d,ur,pke,log(25000.)  ,  status)
        VERIFY_(STATUS)
     end if
 
     call MAPL_GetPointer(export,temp2d,'U500',  rc=status)
     VERIFY_(STATUS)
     if(associated(temp2d)) then
-       call VertInterp(temp2d,ua,pke,log(50000.)  ,  status)
+       call VertInterp(temp2d,ur,pke,log(50000.)  ,  status)
        VERIFY_(STATUS)
     end if
 
     call MAPL_GetPointer(export,temp2d,'U700',  rc=status)
     VERIFY_(STATUS)
     if(associated(temp2d)) then
-       call VertInterp(temp2d,ua,pke,log(70000.)  ,  status)
+       call VertInterp(temp2d,ur,pke,log(70000.)  ,  status)
        VERIFY_(STATUS)
     end if
 
     call MAPL_GetPointer(export,temp2d,'U850',  rc=status)
     VERIFY_(STATUS)
     if(associated(temp2d)) then
-       call VertInterp(temp2d,ua,pke,log(85000.)  ,  status)
+       call VertInterp(temp2d,ur,pke,log(85000.)  ,  status)
        VERIFY_(STATUS)
     end if
 
     call MAPL_GetPointer(export,temp2d,'V200',  rc=status)
     VERIFY_(STATUS)
     if(associated(temp2d)) then
-       call VertInterp(temp2d,va,pke,log(20000.)  ,  status)
+       call VertInterp(temp2d,vr,pke,log(20000.)  ,  status)
        VERIFY_(STATUS)
     end if
 
     call MAPL_GetPointer(export,temp2d,'V250',  rc=status)
     VERIFY_(STATUS)
     if(associated(temp2d)) then
-       call VertInterp(temp2d,va,pke,log(25000.)  ,  status)
+       call VertInterp(temp2d,vr,pke,log(25000.)  ,  status)
        VERIFY_(STATUS)
     end if
 
     call MAPL_GetPointer(export,temp2d,'V500',  rc=status)
     VERIFY_(STATUS)
     if(associated(temp2d)) then
-       call VertInterp(temp2d,va,pke,log(50000.)  ,  status)
+       call VertInterp(temp2d,vr,pke,log(50000.)  ,  status)
        VERIFY_(STATUS)
     end if
 
     call MAPL_GetPointer(export,temp2d,'V700',  rc=status)
     VERIFY_(STATUS)
     if(associated(temp2d)) then
-       call VertInterp(temp2d,va,pke,log(70000.)  ,  status)
+       call VertInterp(temp2d,vr,pke,log(70000.)  ,  status)
        VERIFY_(STATUS)
     end if
 
     call MAPL_GetPointer(export,temp2d,'V850',  rc=status)
     VERIFY_(STATUS)
     if(associated(temp2d)) then
-       call VertInterp(temp2d,va,pke,log(85000.)  ,  status)
+       call VertInterp(temp2d,vr,pke,log(85000.)  ,  status)
        VERIFY_(STATUS)
     end if
 
@@ -6598,11 +6552,11 @@ end subroutine RUN
 ! ---------------------------------------
     call MAPL_GetPointer(export,temp2d,'UTOP', rc=status)
     VERIFY_(STATUS)
-    if(associated(temp2d)) temp2d = ua(:,:,1)
+    if(associated(temp2d)) temp2d = ur(:,:,1)
 
     call MAPL_GetPointer(export,temp2d,'VTOP', rc=status)
     VERIFY_(STATUS)
-    if(associated(temp2d)) temp2d = va(:,:,1)
+    if(associated(temp2d)) temp2d = vr(:,:,1)
 
     call MAPL_GetPointer(export,temp2d,'TTOP', rc=status)
     VERIFY_(STATUS)
@@ -6621,14 +6575,14 @@ end subroutine RUN
     call MAPL_GetPointer(export,temp2d,'U50M',  rc=status)
     VERIFY_(STATUS)
     if(associated(temp2d)) then
-       call VertInterp(temp2d,ua,-zle,-50., status)
+       call VertInterp(temp2d,ur,-zle,-50., status)
        VERIFY_(STATUS)
     end if
 
     call MAPL_GetPointer(export,temp2d,'V50M',  rc=status)
     VERIFY_(STATUS)
     if(associated(temp2d)) then
-       call VertInterp(temp2d,va,-zle,-50., status)
+       call VertInterp(temp2d,vr,-zle,-50., status)
        VERIFY_(STATUS)
     end if
 
@@ -6656,7 +6610,7 @@ end subroutine RUN
     if(associated(temp2d)) then
        temp2d = 0.0
        do k=1,km
-       temp2d = temp2d + ua(:,:,k)*dp(:,:,k)
+       temp2d = temp2d + ur(:,:,k)*dp(:,:,k)
        enddo
        temp2d = temp2d / (vars%pe(:,:,km+1)-vars%pe(:,:,1))
     endif
@@ -6713,13 +6667,15 @@ end subroutine RUN
 ! Deallocate Memory
 ! -----------------
 
+    if (doEnergetics) then
     DEALLOCATE(  kenrg )
     DEALLOCATE(  penrg )
     DEALLOCATE(  tenrg )
     DEALLOCATE( kenrg0 )
     DEALLOCATE( penrg0 )
     DEALLOCATE( tenrg0 )
-    DEALLOCATE(  tmp2d )
+    endif
+
     DEALLOCATE(  tmp3d )
 
     DEALLOCATE( phisxy )
@@ -6728,6 +6684,8 @@ end subroutine RUN
     DEALLOCATE(     va )
     DEALLOCATE(     uc )
     DEALLOCATE(     vc )
+    DEALLOCATE(     ur )
+    DEALLOCATE(     vr )
     DEALLOCATE(     qv )
     DEALLOCATE(     pl )
     DEALLOCATE(     dp )
diff --git a/FV_StateMod.F90 b/FV_StateMod.F90
index fb189c7..d5ed1dd 100644
--- a/FV_StateMod.F90
+++ b/FV_StateMod.F90
@@ -33,7 +33,8 @@ module FV_StateMod
    use fv_sg_mod, only: fv_subgrid_z
    use gfdl_lin_cloud_microphys_mod, only: gfdl_cloud_microphys_init
 
-   use fv_diagnostics_mod, only: prt_maxmin, prt_minmax, range_check
+   use fv_diagnostics_mod, only: prt_maxmin, prt_minmax, range_check, &
+                                 get_vorticity, updraft_helicity
 
 implicit none
 private
@@ -85,7 +86,7 @@ private
 
   public debug_fv_state
 
-  public INTERP_DGRID_TO_AGRID
+  public fv_getAllWinds
   public INTERP_AGRID_TO_DGRID
 
   interface fv_computeMassFluxes
@@ -93,10 +94,10 @@ private
      module procedure fv_computeMassFluxes_r8
   end interface  
 
-  INTERFACE INTERP_DGRID_TO_AGRID
+  INTERFACE fv_getAllWinds
 
-   MODULE PROCEDURE fv_getAgridWinds_3D
-   MODULE PROCEDURE fv_getAgridWinds_2D
+   MODULE PROCEDURE fv_getAllWinds_3D
+   MODULE PROCEDURE fv_getAllWinds_2D
 
   END INTERFACE
 
@@ -3713,7 +3714,6 @@ end subroutine fv_getDivergence
 
 subroutine fv_getUpdraftHelicity(uh25)
    use constants_mod, only: fms_grav=>grav
-   use fv_diagnostics_mod, only: get_vorticity, updraft_helicity
 ! made this REAL4
    real(REAL4), intent(OUT) :: uh25(FV_Atm(1)%bd%isc:FV_Atm(1)%bd%iec,FV_Atm(1)%bd%jsc:FV_Atm(1)%bd%jec)
 
@@ -3724,14 +3724,14 @@ subroutine fv_getUpdraftHelicity(uh25)
    ! introduced these two variables for the literals
    real(FVPRC) :: z_bot, z_top
 
-   z_bot = 2.e3
-   z_top = 5.e3
    call get_vorticity(FV_Atm(1)%bd%isc, FV_Atm(1)%bd%iec, FV_Atm(1)%bd%jsc, FV_Atm(1)%bd%jec, &
                       FV_Atm(1)%bd%isd, FV_Atm(1)%bd%ied, FV_Atm(1)%bd%jsd, FV_Atm(1)%bd%jed, &
                       FV_Atm(1)%npz, FV_Atm(1)%u, FV_Atm(1)%v, vort, &
                       FV_Atm(1)%gridstruct%dx, FV_Atm(1)%gridstruct%dy, FV_Atm(1)%gridstruct%rarea)
 
 ! call this with uh25_tmp which is of FVPRC
+   z_bot = 2.e3
+   z_top = 5.e3
    call updraft_helicity(FV_Atm(1)%bd%isc, FV_Atm(1)%bd%iec, FV_Atm(1)%bd%jsc, FV_Atm(1)%bd%jec, FV_Atm(1)%ng, FV_Atm(1)%npz, &
                      zvir, sphum, uh25_tmp, &
                      FV_Atm(1)%w, vort, FV_Atm(1)%delz, FV_Atm(1)%q,   &
@@ -3773,8 +3773,6 @@ subroutine fv_getEPV(pt, vort, ua, va, epv)
   jsc=FV_Atm(1)%bd%jsc ; jec=FV_Atm(1)%bd%jec
   npz = FV_Atm(1)%npz
 
-   pt_g(isc:iec,jsc:jec,:) = pt(isc:iec,jsc:jec,:)
-   call mpp_update_domains(pt_g, FV_Atm(1)%domain, complete=.true.)
 ! Get PT/UA/VA at layer edges
    do j=jsc,jec
       call ppme(pt(isc:iec,j,:),pt_e(isc:iec,j,:),FV_Atm(1)%delp(isc:iec,j,:),iec-isc+1,npz)
@@ -3784,6 +3782,8 @@ subroutine fv_getEPV(pt, vort, ua, va, epv)
 
    if (.not. FV_HYDROSTATIC) then
       dz_g(isc:iec,jsc:jec,:) = FV_Atm(1)%delz(isc:iec,jsc:jec,:)
+      pt_g(isc:iec,jsc:jec,:) = pt(isc:iec,jsc:jec,:)
+      call mpp_update_domains(pt_g, FV_Atm(1)%domain, complete=.false.)
       call mpp_update_domains(dz_g, FV_Atm(1)%domain, complete=.false.)
       call mpp_update_domains(FV_Atm(1)%w,  FV_Atm(1)%domain, complete=.true.)
       do k=1,npz
@@ -3832,6 +3832,8 @@ subroutine fv_getEPV(pt, vort, ua, va, epv)
         enddo
       enddo
    else
+      pt_g(isc:iec,jsc:jec,:) = pt(isc:iec,jsc:jec,:)
+      call mpp_update_domains(pt_g, FV_Atm(1)%domain, complete=.true.)
       do k=1,npz
         do j=jsc,jec
           do i=isc,iec
@@ -3862,11 +3864,11 @@ end subroutine fv_getEPV
 !------------------------------------------------------------------------------
 !BOP         
 !
-! !IROUTINE: fv_getAgridWinds_3D
+! !IROUTINE: fv_getAllWinds_3D
 !
 ! !INTERFACE:
 !    
-subroutine fv_getAgridWinds_3D(u, v, ua, va, uc, vc, rotate)
+subroutine fv_getAllWinds_3D(u, v, ua, va, uc, vc, ur, vr, vort, divg, rotate)
 
 ! !INPUT PARAMETERS:
   real(REAL8), intent(IN)  ::  u(FV_Atm(1)%bd%isc:FV_Atm(1)%bd%iec,FV_Atm(1)%bd%jsc:FV_Atm(1)%bd%jec,1:FV_Atm(1)%npz)
@@ -3874,10 +3876,17 @@ subroutine fv_getAgridWinds_3D(u, v, ua, va, uc, vc, rotate)
   logical, optional, intent(IN) :: rotate
 ! 
 ! !OUTPUT PARAMETERS:
-  real(REAL8),           intent(OUT) :: ua(FV_Atm(1)%bd%isc:FV_Atm(1)%bd%iec,FV_Atm(1)%bd%jsc:FV_Atm(1)%bd%jec,1:FV_Atm(1)%npz)
-  real(REAL8),           intent(OUT) :: va(FV_Atm(1)%bd%isc:FV_Atm(1)%bd%iec,FV_Atm(1)%bd%jsc:FV_Atm(1)%bd%jec,1:FV_Atm(1)%npz)
+ ! non-rotated winds
+  real(REAL8), optional, intent(OUT) :: ua(FV_Atm(1)%bd%isc:FV_Atm(1)%bd%iec,FV_Atm(1)%bd%jsc:FV_Atm(1)%bd%jec,1:FV_Atm(1)%npz)
+  real(REAL8), optional, intent(OUT) :: va(FV_Atm(1)%bd%isc:FV_Atm(1)%bd%iec,FV_Atm(1)%bd%jsc:FV_Atm(1)%bd%jec,1:FV_Atm(1)%npz)
   real(REAL8), optional, intent(OUT) :: uc(FV_Atm(1)%bd%isc:FV_Atm(1)%bd%iec,FV_Atm(1)%bd%jsc:FV_Atm(1)%bd%jec,1:FV_Atm(1)%npz)
   real(REAL8), optional, intent(OUT) :: vc(FV_Atm(1)%bd%isc:FV_Atm(1)%bd%iec,FV_Atm(1)%bd%jsc:FV_Atm(1)%bd%jec,1:FV_Atm(1)%npz)
+ ! rotated winds
+  real(REAL8), optional, intent(OUT) :: ur(FV_Atm(1)%bd%isc:FV_Atm(1)%bd%iec,FV_Atm(1)%bd%jsc:FV_Atm(1)%bd%jec,1:FV_Atm(1)%npz)
+  real(REAL8), optional, intent(OUT) :: vr(FV_Atm(1)%bd%isc:FV_Atm(1)%bd%iec,FV_Atm(1)%bd%jsc:FV_Atm(1)%bd%jec,1:FV_Atm(1)%npz)
+ ! vorticity/divergence
+  real(FVPRC), optional, intent(OUT) :: vort(FV_Atm(1)%bd%isc:FV_Atm(1)%bd%iec,FV_Atm(1)%bd%jsc:FV_Atm(1)%bd%jec,1:FV_Atm(1)%npz)
+  real(FVPRC), optional, intent(OUT) :: divg(FV_Atm(1)%bd%isc:FV_Atm(1)%bd%iec,FV_Atm(1)%bd%jsc:FV_Atm(1)%bd%jec,1:FV_Atm(1)%npz)
 !
 ! !DESCRIPTION:
 ! 
@@ -3916,7 +3925,6 @@ subroutine fv_getAgridWinds_3D(u, v, ua, va, uc, vc, rotate)
   vatemp = 0
   uctemp = 0
   vctemp = 0
-
   if (FV_Atm(1)%flagstruct%grid_type>=4) then
   ! Doubly Periodic
     uatemp(isc:iec,jsc:jec,:) = u
@@ -3944,8 +3952,15 @@ subroutine fv_getAgridWinds_3D(u, v, ua, va, uc, vc, rotate)
        enddo  
     enddo   
   endif
-
   call mpp_update_domains(utemp, vtemp, FV_Atm(1)%domain, gridtype=DGRID_NE, complete=.true.)
+
+  if (present(vort)) then
+     call get_vorticity(isc, iec, jsc, jec, &
+                        isd, ied, jsd, jed, &
+                        npz, utemp, vtemp, vort, &
+                        FV_Atm(1)%gridstruct%dx, FV_Atm(1)%gridstruct%dy, FV_Atm(1)%gridstruct%rarea)
+  endif
+
   do k=1,npz
    call d2a2c_vect(utemp(:,:,k),  vtemp(:,:,k), &
                    uatemp(:,:,k), vatemp(:,:,k), &
@@ -3953,41 +3968,84 @@ subroutine fv_getAgridWinds_3D(u, v, ua, va, uc, vc, rotate)
                    FV_Atm(1)%gridstruct,FV_Atm(1)%bd, FV_Atm(1)%flagstruct%npx, FV_Atm(1)%flagstruct%npy, &
                    FV_Atm(1)%gridstruct%nested, FV_Atm(1)%gridstruct%grid_type)
   enddo
-  if (FV_Atm(1)%flagstruct%grid_type<4 .AND. present(rotate)) then 
-   if (rotate) call cubed_to_latlon(utemp  , vtemp  , &
-                                    uatemp , vatemp , &
-                                    FV_Atm(1)%gridstruct, &
-                                    FV_Atm(1)%flagstruct%npx, FV_Atm(1)%flagstruct%npy, FV_Atm(1)%flagstruct%npz, -1, &
-                                    FV_Atm(1)%gridstruct%grid_type, &
-                                    FV_Atm(1)%domain,FV_Atm(1)%gridstruct%nested,FV_Atm(1)%flagstruct%c2l_ord,FV_Atm(1)%bd)
-  endif
-
-  ua(:,:,:) = uatemp(isc:iec,jsc:jec,:)
-  va(:,:,:) = vatemp(isc:iec,jsc:jec,:)
+  if (present(ua)) ua(:,:,:) = uatemp(isc:iec,jsc:jec,:)
+  if (present(va)) va(:,:,:) = vatemp(isc:iec,jsc:jec,:)
   if (present(uc)) uc(:,:,:) = uctemp(isc:iec,jsc:jec,:)
   if (present(vc)) vc(:,:,:) = vctemp(isc:iec,jsc:jec,:)
 
+! Calc Divergence
+  if (present(divg)) then
+    do k=1,npz
+        call compute_utvt(uctemp(isd,jsd,k), vctemp(isd,jsd,k), ut(isd,jsd), vt(isd,jsd), 1.0)
+        do j=jsc,jec
+           do i=isc,iec+1
+              if ( ut(i,j) > 0. ) then
+                   ut(i,j) = fv_atm(1)%gridstruct%dy(i,j)*ut(i,j)*fv_atm(1)%gridstruct%sin_sg(i-1,j,3)
+              else
+                   ut(i,j) = fv_atm(1)%gridstruct%dy(i,j)*ut(i,j)*fv_atm(1)%gridstruct%sin_sg(i,j,1)
+             endif
+           enddo
+        enddo
+        do j=jsc,jec+1
+           do i=isc,iec
+              if ( vt(i,j) > 0. ) then
+                   vt(i,j) = fv_atm(1)%gridstruct%dx(i,j)*vt(i,j)*fv_atm(1)%gridstruct%sin_sg(i,j-1,4)
+              else
+                   vt(i,j) = fv_atm(1)%gridstruct%dx(i,j)*vt(i,j)*fv_atm(1)%gridstruct%sin_sg(i,j,2)
+              endif
+           enddo
+        enddo
+        do j=jsc,jec
+           do i=isc,iec
+              divg(i,j,k) = fv_atm(1)%gridstruct%rarea(i,j)*( ut(i+1,j)-ut(i,j) + &
+                                                              vt(i,j+1)-vt(i,j) )
+           enddo
+        enddo
+    enddo
+  endif
+
+  if (FV_Atm(1)%flagstruct%grid_type<4 .AND. present(rotate)) then 
+     if (rotate) then
+         call cubed_to_latlon(utemp  , vtemp  , &
+                              uatemp , vatemp , &
+                              FV_Atm(1)%gridstruct, &
+                              FV_Atm(1)%flagstruct%npx, FV_Atm(1)%flagstruct%npy, FV_Atm(1)%flagstruct%npz, -1, &
+                              FV_Atm(1)%gridstruct%grid_type, &
+                              FV_Atm(1)%domain,FV_Atm(1)%gridstruct%nested,FV_Atm(1)%flagstruct%c2l_ord,FV_Atm(1)%bd)
+        if (present(ur)) ur = uatemp(isc:iec,jsc:jec,:)
+        if (present(vr)) vr = vatemp(isc:iec,jsc:jec,:)
+     endif
+  endif
+
   return
-end subroutine fv_getAgridWinds_3D
+end subroutine fv_getAllWinds_3D
 !EOC
 !------------------------------------------------------------------------------
 !BOP
 !
-! !IROUTINE: fv_getAgridWinds_2D
+! !IROUTINE: fv_getAllWinds_2D
 !
 ! !INTERFACE:
 !
-subroutine fv_getAgridWinds_2D(u, v, ua, va, rotate)
+subroutine fv_getAllWinds_2D(u, v, ua, va, uc, vc, ur, vr, vort, divg, rotate)
 
 !
 ! !INPUT PARAMETERS:
-  real(REAL8), intent(IN)  ::  u(FV_Atm(1)%bd%isc:FV_Atm(1)%bd%iec,FV_Atm(1)%bd%jsc:FV_Atm(1)%bd%jec)
-  real(REAL8), intent(IN)  ::  v(FV_Atm(1)%bd%isc:FV_Atm(1)%bd%iec,FV_Atm(1)%bd%jsc:FV_Atm(1)%bd%jec)
-  logical, optional, intent(IN) :: rotate
+  real(REAL8),           intent(IN   )  ::  u(FV_Atm(1)%bd%isc:FV_Atm(1)%bd%iec,FV_Atm(1)%bd%jsc:FV_Atm(1)%bd%jec)
+  real(REAL8),           intent(IN   )  ::  v(FV_Atm(1)%bd%isc:FV_Atm(1)%bd%iec,FV_Atm(1)%bd%jsc:FV_Atm(1)%bd%jec)
+  logical,     optional, intent(IN   )  :: rotate
 !
 ! !OUTPUT PARAMETERS:
-  real(REAL8), intent(OUT) :: ua(FV_Atm(1)%bd%isc:FV_Atm(1)%bd%iec,FV_Atm(1)%bd%jsc:FV_Atm(1)%bd%jec)
-  real(REAL8), intent(OUT) :: va(FV_Atm(1)%bd%isc:FV_Atm(1)%bd%iec,FV_Atm(1)%bd%jsc:FV_Atm(1)%bd%jec)
+  real(REAL8), optional, intent(OUT) :: ua(FV_Atm(1)%bd%isc:FV_Atm(1)%bd%iec,FV_Atm(1)%bd%jsc:FV_Atm(1)%bd%jec)
+  real(REAL8), optional, intent(OUT) :: va(FV_Atm(1)%bd%isc:FV_Atm(1)%bd%iec,FV_Atm(1)%bd%jsc:FV_Atm(1)%bd%jec)
+  real(REAL8), optional, intent(OUT) :: uc(FV_Atm(1)%bd%isc:FV_Atm(1)%bd%iec,FV_Atm(1)%bd%jsc:FV_Atm(1)%bd%jec)
+  real(REAL8), optional, intent(OUT) :: vc(FV_Atm(1)%bd%isc:FV_Atm(1)%bd%iec,FV_Atm(1)%bd%jsc:FV_Atm(1)%bd%jec)
+ ! rotated winds
+  real(REAL8), optional, intent(OUT)  :: ur(FV_Atm(1)%bd%isc:FV_Atm(1)%bd%iec,FV_Atm(1)%bd%jsc:FV_Atm(1)%bd%jec)
+  real(REAL8), optional, intent(OUT)  :: vr(FV_Atm(1)%bd%isc:FV_Atm(1)%bd%iec,FV_Atm(1)%bd%jsc:FV_Atm(1)%bd%jec)
+ ! vorticity/divergence
+  real(REAL8), optional, intent(OUT)  :: vort(FV_Atm(1)%bd%isc:FV_Atm(1)%bd%iec,FV_Atm(1)%bd%jsc:FV_Atm(1)%bd%jec)
+  real(REAL8), optional, intent(OUT)  :: divg(FV_Atm(1)%bd%isc:FV_Atm(1)%bd%iec,FV_Atm(1)%bd%jsc:FV_Atm(1)%bd%jec)
 !
 ! !DESCRIPTION:
 !
@@ -4055,21 +4113,24 @@ subroutine fv_getAgridWinds_2D(u, v, ua, va, rotate)
                   uctemp(:,:), vctemp(:,:), ut, vt, .true., &
                   FV_Atm(1)%gridstruct,FV_Atm(1)%bd, FV_Atm(1)%flagstruct%npx, FV_Atm(1)%flagstruct%npy, &
                   FV_Atm(1)%gridstruct%nested, FV_Atm(1)%gridstruct%grid_type)
+  if (present(ua)) ua(:,:) = uatemp(isc:iec,jsc:jec)
+  if (present(va)) va(:,:) = vatemp(isc:iec,jsc:jec)
 
   if (FV_Atm(1)%flagstruct%grid_type<4 .AND. present(rotate)) then 
-   if (rotate) call cubed_to_latlon(utemp  , vtemp  , &
-                                    uatemp , vatemp , &
-                                    FV_Atm(1)%gridstruct, &
-                                    FV_Atm(1)%flagstruct%npx, FV_Atm(1)%flagstruct%npy, 1, -1, &
-                                    FV_Atm(1)%gridstruct%grid_type, &
-                                    FV_Atm(1)%domain,FV_Atm(1)%gridstruct%nested,FV_Atm(1)%flagstruct%c2l_ord,FV_Atm(1)%bd)
+     if (rotate) then
+         call cubed_to_latlon(utemp  , vtemp  , &
+                              uatemp , vatemp , &
+                              FV_Atm(1)%gridstruct, &
+                              FV_Atm(1)%flagstruct%npx, FV_Atm(1)%flagstruct%npy, 1, -1, &
+                              FV_Atm(1)%gridstruct%grid_type, &
+                              FV_Atm(1)%domain,FV_Atm(1)%gridstruct%nested,FV_Atm(1)%flagstruct%c2l_ord,FV_Atm(1)%bd)
+        if (present(ur)) ur = uatemp(isc:iec,jsc:jec)
+        if (present(vr)) vr = vatemp(isc:iec,jsc:jec)
+     endif
   endif
 
-  ua(:,:) = uatemp(isc:iec,jsc:jec)
-  va(:,:) = vatemp(isc:iec,jsc:jec)
-
   return
-end subroutine fv_getAgridWinds_2D
+end subroutine fv_getAllWinds_2D
 !EOC
 !------------------------------------------------------------------------------
 
